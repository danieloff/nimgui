# Copyright 2019, Leonardo Mariscal & Zachary Carter.

## ImGUI Bindings
## ===
## This code was automatically generated by nimgui<https://github.com/zacharycarter/nimgui>`_
## with the imgui generator.
##
## This bindings follow most of the original library
## You can check the original documentation `here <https://github.com/ocornut/imgui/blob/master/imgui.cpp>`_.
##
## Do to this library most of the binding libraries are written in C, we want
## to continue supporting only C libraries so you can always use the backend of
## your choice. We are binding `cimgui <https://github.com/cimgui/cimgui>`_
## which is a thin c wrapper of the c++ version. It is up to date and has great
## support.
##
## NOTE: Unless you want to compile witch cpp please provide a dll of the library,
## made with cimgui.
##
## Even tho we try to keep this bindings the closes to the source, this one specially
## needs some extra work to fully function with glfw, so there are some helper functions
## to help with the proccess
##
## HACK: If you are on windows be sure to compile the cimgui dll with visual studio and
## not with mingw.

import strutils

proc currentSourceDir(): string =
  result = currentSourcePath()
  result = result[0 ..< result.rfind("/")]

when not defined(imguiSrc):
  when defined(windows):
    const imgui_dll* = "cimgui.dll"
  elif defined(macosx):
    const imgui_dll* = "cimgui.dylib"
  else:
    const imgui_dll* = "cimgui.so"
  {.passC: "-I" & currentSourceDir() & "/private/cimgui".}
  {.pragma: imgui_lib, dynlib: imgui_dll, cdecl.}
else:
  {.compile: "../cimgui/imgui/imgui.cpp",
    compile: "../cimgui/imgui/imgui_draw.cpp",
    compile: "../cimgui/imgui/imgui_demo.cpp",
    compile: "../cimgui/imgui/imgui_widgets.cpp",
    compile: "../cimgui/cimgui/cimgui.cpp".}
  {.pragma: imgui_lib, cdecl.}

const
  ImDrawCornerFlags_TopLeft* = 1
  ImDrawCornerFlags_TopRight* = 2
  ImDrawCornerFlags_BotLeft* = 4
  ImDrawCornerFlags_BotRight* = 8
  ImDrawCornerFlags_Top* = 3
  ImDrawCornerFlags_Bot* = 12
  ImDrawCornerFlags_Left* = 5
  ImDrawCornerFlags_Right* = 10
  ImDrawCornerFlags_All* = 15
  ImDrawListFlags_None* = 0
  ImDrawListFlags_AntiAliasedLines* = 1
  ImDrawListFlags_AntiAliasedFill* = 2
  ImFontAtlasFlags_None* = 0
  ImFontAtlasFlags_NoPowerOfTwoHeight* = 1
  ImFontAtlasFlags_NoMouseCursors* = 2
  ImGuiBackendFlags_None* = 0
  ImGuiBackendFlags_HasGamepad* = 1
  ImGuiBackendFlags_HasMouseCursors* = 2
  ImGuiBackendFlags_HasSetMousePos* = 4
  ImGuiCol_Text* = 0
  ImGuiCol_TextDisabled* = 1
  ImGuiCol_WindowBg* = 2
  ImGuiCol_ChildBg* = 3
  ImGuiCol_PopupBg* = 4
  ImGuiCol_Border* = 5
  ImGuiCol_BorderShadow* = 6
  ImGuiCol_FrameBg* = 7
  ImGuiCol_FrameBgHovered* = 8
  ImGuiCol_FrameBgActive* = 9
  ImGuiCol_TitleBg* = 10
  ImGuiCol_TitleBgActive* = 11
  ImGuiCol_TitleBgCollapsed* = 12
  ImGuiCol_MenuBarBg* = 13
  ImGuiCol_ScrollbarBg* = 14
  ImGuiCol_ScrollbarGrab* = 15
  ImGuiCol_ScrollbarGrabHovered* = 16
  ImGuiCol_ScrollbarGrabActive* = 17
  ImGuiCol_CheckMark* = 18
  ImGuiCol_SliderGrab* = 19
  ImGuiCol_SliderGrabActive* = 20
  ImGuiCol_Button* = 21
  ImGuiCol_ButtonHovered* = 22
  ImGuiCol_ButtonActive* = 23
  ImGuiCol_Header* = 24
  ImGuiCol_HeaderHovered* = 25
  ImGuiCol_HeaderActive* = 26
  ImGuiCol_Separator* = 27
  ImGuiCol_SeparatorHovered* = 28
  ImGuiCol_SeparatorActive* = 29
  ImGuiCol_ResizeGrip* = 30
  ImGuiCol_ResizeGripHovered* = 31
  ImGuiCol_ResizeGripActive* = 32
  ImGuiCol_Tab* = 33
  ImGuiCol_TabHovered* = 34
  ImGuiCol_TabActive* = 35
  ImGuiCol_TabUnfocused* = 36
  ImGuiCol_TabUnfocusedActive* = 37
  ImGuiCol_PlotLines* = 38
  ImGuiCol_PlotLinesHovered* = 39
  ImGuiCol_PlotHistogram* = 40
  ImGuiCol_PlotHistogramHovered* = 41
  ImGuiCol_TextSelectedBg* = 42
  ImGuiCol_DragDropTarget* = 43
  ImGuiCol_NavHighlight* = 44
  ImGuiCol_NavWindowingHighlight* = 45
  ImGuiCol_NavWindowingDimBg* = 46
  ImGuiCol_ModalWindowDimBg* = 47
  ImGuiCol_COUNT* = 48
  ImGuiColorEditFlags_None* = 0
  ImGuiColorEditFlags_NoAlpha* = 2
  ImGuiColorEditFlags_NoPicker* = 4
  ImGuiColorEditFlags_NoOptions* = 8
  ImGuiColorEditFlags_NoSmallPreview* = 16
  ImGuiColorEditFlags_NoInputs* = 32
  ImGuiColorEditFlags_NoTooltip* = 64
  ImGuiColorEditFlags_NoLabel* = 128
  ImGuiColorEditFlags_NoSidePreview* = 256
  ImGuiColorEditFlags_NoDragDrop* = 512
  ImGuiColorEditFlags_AlphaBar* = 65536
  ImGuiColorEditFlags_AlphaPreview* = 131072
  ImGuiColorEditFlags_AlphaPreviewHalf* = 262144
  ImGuiColorEditFlags_HDR* = 524288
  ImGuiColorEditFlags_RGB* = 1048576
  ImGuiColorEditFlags_HSV* = 2097152
  ImGuiColorEditFlags_HEX* = 4194304
  ImGuiColorEditFlags_Uint8* = 8388608
  ImGuiColorEditFlags_Float* = 16777216
  ImGuiColorEditFlags_PickerHueBar* = 33554432
  ImGuiColorEditFlags_PickerHueWheel* = 67108864
  ImGuiColorEditFlags_InputsMask* = 7340032
  ImGuiColorEditFlags_DataTypeMask* = 25165824
  ImGuiColorEditFlags_PickerMask* = 100663296
  ImGuiColorEditFlags_OptionsDefault* = 42991616
  ImGuiComboFlags_None* = 0
  ImGuiComboFlags_PopupAlignLeft* = 1
  ImGuiComboFlags_HeightSmall* = 2
  ImGuiComboFlags_HeightRegular* = 4
  ImGuiComboFlags_HeightLarge* = 8
  ImGuiComboFlags_HeightLargest* = 16
  ImGuiComboFlags_NoArrowButton* = 32
  ImGuiComboFlags_NoPreview* = 64
  ImGuiComboFlags_HeightMask* = 30
  ImGuiCond_Always* = 1
  ImGuiCond_Once* = 2
  ImGuiCond_FirstUseEver* = 4
  ImGuiCond_Appearing* = 8
  ImGuiConfigFlags_None* = 0
  ImGuiConfigFlags_NavEnableKeyboard* = 1
  ImGuiConfigFlags_NavEnableGamepad* = 2
  ImGuiConfigFlags_NavEnableSetMousePos* = 4
  ImGuiConfigFlags_NavNoCaptureKeyboard* = 8
  ImGuiConfigFlags_NoMouse* = 16
  ImGuiConfigFlags_NoMouseCursorChange* = 32
  ImGuiConfigFlags_IsSRGB* = 1048576
  ImGuiConfigFlags_IsTouchScreen* = 2097152
  ImGuiDataType_S32* = 0
  ImGuiDataType_U32* = 1
  ImGuiDataType_S64* = 2
  ImGuiDataType_U64* = 3
  ImGuiDataType_Float* = 4
  ImGuiDataType_Double* = 5
  ImGuiDataType_COUNT* = 6
  ImGuiDir_None* = -1
  ImGuiDir_Left* = 0
  ImGuiDir_Right* = 1
  ImGuiDir_Up* = 2
  ImGuiDir_Down* = 3
  ImGuiDir_COUNT* = 4
  ImGuiDragDropFlags_None* = 0
  ImGuiDragDropFlags_SourceNoPreviewTooltip* = 1
  ImGuiDragDropFlags_SourceNoDisableHover* = 2
  ImGuiDragDropFlags_SourceNoHoldToOpenOthers* = 4
  ImGuiDragDropFlags_SourceAllowNullID* = 8
  ImGuiDragDropFlags_SourceExtern* = 16
  ImGuiDragDropFlags_SourceAutoExpirePayload* = 32
  ImGuiDragDropFlags_AcceptBeforeDelivery* = 1024
  ImGuiDragDropFlags_AcceptNoDrawDefaultRect* = 2048
  ImGuiDragDropFlags_AcceptNoPreviewTooltip* = 4096
  ImGuiDragDropFlags_AcceptPeekOnly* = 3072
  ImGuiFocusedFlags_None* = 0
  ImGuiFocusedFlags_ChildWindows* = 1
  ImGuiFocusedFlags_RootWindow* = 2
  ImGuiFocusedFlags_AnyWindow* = 4
  ImGuiFocusedFlags_RootAndChildWindows* = 3
  ImGuiHoveredFlags_None* = 0
  ImGuiHoveredFlags_ChildWindows* = 1
  ImGuiHoveredFlags_RootWindow* = 2
  ImGuiHoveredFlags_AnyWindow* = 4
  ImGuiHoveredFlags_AllowWhenBlockedByPopup* = 8
  ImGuiHoveredFlags_AllowWhenBlockedByActiveItem* = 32
  ImGuiHoveredFlags_AllowWhenOverlapped* = 64
  ImGuiHoveredFlags_AllowWhenDisabled* = 128
  ImGuiHoveredFlags_RectOnly* = 104
  ImGuiHoveredFlags_RootAndChildWindows* = 3
  ImGuiInputTextFlags_None* = 0
  ImGuiInputTextFlags_CharsDecimal* = 1
  ImGuiInputTextFlags_CharsHexadecimal* = 2
  ImGuiInputTextFlags_CharsUppercase* = 4
  ImGuiInputTextFlags_CharsNoBlank* = 8
  ImGuiInputTextFlags_AutoSelectAll* = 16
  ImGuiInputTextFlags_EnterReturnsTrue* = 32
  ImGuiInputTextFlags_CallbackCompletion* = 64
  ImGuiInputTextFlags_CallbackHistory* = 128
  ImGuiInputTextFlags_CallbackAlways* = 256
  ImGuiInputTextFlags_CallbackCharFilter* = 512
  ImGuiInputTextFlags_AllowTabInput* = 1024
  ImGuiInputTextFlags_CtrlEnterForNewLine* = 2048
  ImGuiInputTextFlags_NoHorizontalScroll* = 4096
  ImGuiInputTextFlags_AlwaysInsertMode* = 8192
  ImGuiInputTextFlags_ReadOnly* = 16384
  ImGuiInputTextFlags_Password* = 32768
  ImGuiInputTextFlags_NoUndoRedo* = 65536
  ImGuiInputTextFlags_CharsScientific* = 131072
  ImGuiInputTextFlags_CallbackResize* = 262144
  ImGuiInputTextFlags_Multiline* = 1048576
  ImGuiKey_Tab* = 0
  ImGuiKey_LeftArrow* = 1
  ImGuiKey_RightArrow* = 2
  ImGuiKey_UpArrow* = 3
  ImGuiKey_DownArrow* = 4
  ImGuiKey_PageUp* = 5
  ImGuiKey_PageDown* = 6
  ImGuiKey_Home* = 7
  ImGuiKey_End* = 8
  ImGuiKey_Insert* = 9
  ImGuiKey_Delete* = 10
  ImGuiKey_Backspace* = 11
  ImGuiKey_Space* = 12
  ImGuiKey_Enter* = 13
  ImGuiKey_Escape* = 14
  ImGuiKey_A* = 15
  ImGuiKey_C* = 16
  ImGuiKey_V* = 17
  ImGuiKey_X* = 18
  ImGuiKey_Y* = 19
  ImGuiKey_Z* = 20
  ImGuiKey_COUNT* = 21
  ImGuiMouseCursor_None* = -1
  ImGuiMouseCursor_Arrow* = 0
  ImGuiMouseCursor_TextInput* = 1
  ImGuiMouseCursor_ResizeAll* = 2
  ImGuiMouseCursor_ResizeNS* = 3
  ImGuiMouseCursor_ResizeEW* = 4
  ImGuiMouseCursor_ResizeNESW* = 5
  ImGuiMouseCursor_ResizeNWSE* = 6
  ImGuiMouseCursor_Hand* = 7
  ImGuiMouseCursor_COUNT* = 8
  ImGuiNavInput_Activate* = 0
  ImGuiNavInput_Cancel* = 1
  ImGuiNavInput_Input* = 2
  ImGuiNavInput_Menu* = 3
  ImGuiNavInput_DpadLeft* = 4
  ImGuiNavInput_DpadRight* = 5
  ImGuiNavInput_DpadUp* = 6
  ImGuiNavInput_DpadDown* = 7
  ImGuiNavInput_LStickLeft* = 8
  ImGuiNavInput_LStickRight* = 9
  ImGuiNavInput_LStickUp* = 10
  ImGuiNavInput_LStickDown* = 11
  ImGuiNavInput_FocusPrev* = 12
  ImGuiNavInput_FocusNext* = 13
  ImGuiNavInput_TweakSlow* = 14
  ImGuiNavInput_TweakFast* = 15
  ImGuiNavInput_KeyMenu* = 16
  ImGuiNavInput_KeyLeft* = 17
  ImGuiNavInput_KeyRight* = 18
  ImGuiNavInput_KeyUp* = 19
  ImGuiNavInput_KeyDown* = 20
  ImGuiNavInput_COUNT* = 21
  ImGuiNavInput_InternalStart* = 16
  ImGuiSelectableFlags_None* = 0
  ImGuiSelectableFlags_DontClosePopups* = 1
  ImGuiSelectableFlags_SpanAllColumns* = 2
  ImGuiSelectableFlags_AllowDoubleClick* = 4
  ImGuiSelectableFlags_Disabled* = 8
  ImGuiStyleVar_Alpha* = 0
  ImGuiStyleVar_WindowPadding* = 1
  ImGuiStyleVar_WindowRounding* = 2
  ImGuiStyleVar_WindowBorderSize* = 3
  ImGuiStyleVar_WindowMinSize* = 4
  ImGuiStyleVar_WindowTitleAlign* = 5
  ImGuiStyleVar_ChildRounding* = 6
  ImGuiStyleVar_ChildBorderSize* = 7
  ImGuiStyleVar_PopupRounding* = 8
  ImGuiStyleVar_PopupBorderSize* = 9
  ImGuiStyleVar_FramePadding* = 10
  ImGuiStyleVar_FrameRounding* = 11
  ImGuiStyleVar_FrameBorderSize* = 12
  ImGuiStyleVar_ItemSpacing* = 13
  ImGuiStyleVar_ItemInnerSpacing* = 14
  ImGuiStyleVar_IndentSpacing* = 15
  ImGuiStyleVar_ScrollbarSize* = 16
  ImGuiStyleVar_ScrollbarRounding* = 17
  ImGuiStyleVar_GrabMinSize* = 18
  ImGuiStyleVar_GrabRounding* = 19
  ImGuiStyleVar_TabRounding* = 20
  ImGuiStyleVar_ButtonTextAlign* = 21
  ImGuiStyleVar_COUNT* = 22
  ImGuiTabBarFlags_None* = 0
  ImGuiTabBarFlags_Reorderable* = 1
  ImGuiTabBarFlags_AutoSelectNewTabs* = 2
  ImGuiTabBarFlags_NoCloseWithMiddleMouseButton* = 4
  ImGuiTabBarFlags_NoTabListPopupButton* = 8
  ImGuiTabBarFlags_NoTabListScrollingButtons* = 16
  ImGuiTabBarFlags_NoTooltip* = 32
  ImGuiTabBarFlags_FittingPolicyResizeDown* = 64
  ImGuiTabBarFlags_FittingPolicyScroll* = 128
  ImGuiTabBarFlags_FittingPolicyMask* = 192
  ImGuiTabBarFlags_FittingPolicyDefault* = 64
  ImGuiTabItemFlags_None* = 0
  ImGuiTabItemFlags_UnsavedDocument* = 1
  ImGuiTabItemFlags_SetSelected* = 2
  ImGuiTabItemFlags_NoCloseWithMiddleMouseButton* = 4
  ImGuiTabItemFlags_NoPushId* = 8
  ImGuiTreeNodeFlags_None* = 0
  ImGuiTreeNodeFlags_Selected* = 1
  ImGuiTreeNodeFlags_Framed* = 2
  ImGuiTreeNodeFlags_AllowItemOverlap* = 4
  ImGuiTreeNodeFlags_NoTreePushOnOpen* = 8
  ImGuiTreeNodeFlags_NoAutoOpenOnLog* = 16
  ImGuiTreeNodeFlags_DefaultOpen* = 32
  ImGuiTreeNodeFlags_OpenOnDoubleClick* = 64
  ImGuiTreeNodeFlags_OpenOnArrow* = 128
  ImGuiTreeNodeFlags_Leaf* = 256
  ImGuiTreeNodeFlags_Bullet* = 512
  ImGuiTreeNodeFlags_FramePadding* = 1024
  ImGuiTreeNodeFlags_NavLeftJumpsBackHere* = 8192
  ImGuiTreeNodeFlags_CollapsingHeader* = 26
  ImGuiWindowFlags_None* = 0
  ImGuiWindowFlags_NoTitleBar* = 1
  ImGuiWindowFlags_NoResize* = 2
  ImGuiWindowFlags_NoMove* = 4
  ImGuiWindowFlags_NoScrollbar* = 8
  ImGuiWindowFlags_NoScrollWithMouse* = 16
  ImGuiWindowFlags_NoCollapse* = 32
  ImGuiWindowFlags_AlwaysAutoResize* = 64
  ImGuiWindowFlags_NoBackground* = 128
  ImGuiWindowFlags_NoSavedSettings* = 256
  ImGuiWindowFlags_NoMouseInputs* = 512
  ImGuiWindowFlags_MenuBar* = 1024
  ImGuiWindowFlags_HorizontalScrollbar* = 2048
  ImGuiWindowFlags_NoFocusOnAppearing* = 4096
  ImGuiWindowFlags_NoBringToFrontOnFocus* = 8192
  ImGuiWindowFlags_AlwaysVerticalScrollbar* = 16384
  ImGuiWindowFlags_AlwaysHorizontalScrollbar* = 32768
  ImGuiWindowFlags_AlwaysUseWindowPadding* = 65536
  ImGuiWindowFlags_NoNavInputs* = 262144
  ImGuiWindowFlags_NoNavFocus* = 524288
  ImGuiWindowFlags_UnsavedDocument* = 1048576
  ImGuiWindowFlags_NoNav* = 786432
  ImGuiWindowFlags_NoDecoration* = 43
  ImGuiWindowFlags_NoInputs* = 786944
  ImGuiWindowFlags_NavFlattened* = 8388608
  ImGuiWindowFlags_ChildWindow* = 16777216
  ImGuiWindowFlags_Tooltip* = 33554432
  ImGuiWindowFlags_Popup* = 67108864
  ImGuiWindowFlags_Modal* = 134217728
  ImGuiWindowFlags_ChildMenu* = 268435456

type
  ImDrawCallback* = proc(parent_list: ptr ImDrawList, cmd: ptr ImDrawCmd): void {.cdecl.}
  ImDrawCornerFlags* = int32
  ImDrawIdx* = uint16
  ImDrawListFlags* = int32
  ImFontAtlasFlags* = int32
  ImGuiBackendFlags* = int32
  ImGuiCol* = int32
  ImGuiColorEditFlags* = int32
  ImGuiColumnsFlags* = int32
  ImGuiComboFlags* = int32
  ImGuiCond* = int32
  ImGuiConfigFlags* = int32
  ImGuiDataType* = int32
  ImGuiDir* = int32
  ImGuiDragDropFlags* = int32
  ImGuiFocusedFlags* = int32
  ImGuiHoveredFlags* = int32
  ImGuiID* = uint32
  ImGuiInputTextCallback* = proc(data: ptr ImGuiInputTextCallbackData): int32 {.cdecl.}
  ImGuiInputTextFlags* = int32
  ImGuiKey* = int32
  ImGuiMouseCursor* = int32
  ImGuiNavInput* = int32
  ImGuiSelectableFlags* = int32
  ImGuiSizeCallback* = proc(data: ptr ImGuiSizeCallbackData): void {.cdecl.}
  ImGuiStyleVar* = int32
  ImGuiTabBarFlags* = int32
  ImGuiTabItemFlags* = int32
  ImGuiTreeNodeFlags* = int32
  ImGuiWindowFlags* = int32
  ImS32* = uint32
  ImS64* = int64
  ImTextureID* = pointer
  ImU32* = uint32
  ImU64* = uint64
  ImWchar* = uint16

  carray* {.unchecked.}[T] = array[0..0, T]
  ImDrawData* {.importc: "ImDrawData", header: "<cimgui.h>".} = object
    valid* {.importc: "Valid".} : bool
    cmdLists* {.importc: "CmdLists".} : carray[ptr ImDrawList]
    cmdListsCount* {.importc: "CmdListsCount".} : int32
    totalIdxCount* {.importc: "TotalIdxCount".} : int32
    totalVtxCount* {.importc: "TotalVtxCount".} : int32
    displayPos* {.importc: "DisplayPos".} : ImVec2
    displaySize* {.importc: "DisplaySize".} : ImVec2
  Pair* {.importc: "Pair", header: "<cimgui.h>".} = object
    key*: ImGuiID
    val*: int32
  ImVector* {.importc: "ImVector", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[pointer]
  ImVector_float* {.importc: "ImVector_float", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[float32]
  ImVector_ImWchar* {.importc: "ImVector_ImWchar", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImWchar]
  ImVector_ImFontConfig* {.importc: "ImVector_ImFontConfig", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImFontConfig]
  ImVector_ImFontGlyph* {.importc: "ImVector_ImFontGlyph", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImFontGlyph]
  ImVector_unsigned_char* {.importc: "ImVector_unsigned_char", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[cuchar]
  ImVector_Pair* {.importc: "ImVector_Pair", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[Pair]
  ImVector_CustomRect* {.importc: "ImVector_CustomRect", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[CustomRect]
  ImVector_ImDrawChannel* {.importc: "ImVector_ImDrawChannel", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImDrawChannel]
  ImVector_char* {.importc: "ImVector_char", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[char]
  ImVector_ImTextureID* {.importc: "ImVector_ImTextureID", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImTextureID]
  ImVector_unsigned_short* {.importc: "ImVector_unsigned_short", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[cushort]
  ImVector_ImDrawVert* {.importc: "ImVector_ImDrawVert", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImDrawVert]
  ImVector_ImDrawCmd* {.importc: "ImVector_ImDrawCmd", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImDrawCmd]
  ImVector_TextRange* {.importc: "ImVector_TextRange", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[TextRange]
  ImVector_ImVec4* {.importc: "ImVector_ImVec4", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImVec4]
  ImVector_ImDrawIdx* {.importc: "ImVector_ImDrawIdx", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImDrawIdx]
  ImVector_ImVec2* {.importc: "ImVector_ImVec2", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImVec2]
  ImVector_ImFontPtr* {.importc: "ImVector_ImFontPtr", header: "<cimgui.h>".} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ptr ImFont]
  ImDrawListSharedData* {.importc: "ImDrawListSharedData", header: "<cimgui.h>".} = object
  ImGuiContext* {.importc: "ImGuiContext", header: "<cimgui.h>".} = object
  igGLFWwindow* = object
  igSDL_Window* = object
  igSDL_Event* = object
  CustomRect* {.importc: "CustomRect", header: "<cimgui.h>".} = object
    iD* {.importc: "ID".} : uint32
    width* {.importc: "Width".} : uint16
    height* {.importc: "Height".} : uint16
    x* {.importc: "X".} : uint16
    y* {.importc: "Y".} : uint16
    glyphAdvanceX* {.importc: "GlyphAdvanceX".} : float32
    glyphOffset* {.importc: "GlyphOffset".} : ImVec2
    font* {.importc: "Font".} : ptr ImFont
  ImColor* {.importc: "ImColor", header: "<cimgui.h>".} = object
    value* {.importc: "Value".} : ImVec4
  ImDrawChannel* {.importc: "ImDrawChannel", header: "<cimgui.h>".} = object
    cmdBuffer* {.importc: "CmdBuffer".} : ImVector_ImDrawCmd
    idxBuffer* {.importc: "IdxBuffer".} : ImVector_ImDrawIdx
  ImDrawCmd* {.importc: "ImDrawCmd", header: "<cimgui.h>".} = object
    elemCount* {.importc: "ElemCount".} : uint32
    clipRect* {.importc: "ClipRect".} : ImVec4
    textureId* {.importc: "TextureId".} : ImTextureID
    userCallback* {.importc: "UserCallback".} : ImDrawCallback
    userCallbackData* {.importc: "UserCallbackData".} : pointer
  ImDrawList* {.importc: "ImDrawList", header: "<cimgui.h>".} = object
    cmdBuffer* {.importc: "CmdBuffer".} : ImVector_ImDrawCmd
    idxBuffer* {.importc: "IdxBuffer".} : ImVector_ImDrawIdx
    vtxBuffer* {.importc: "VtxBuffer".} : ImVector_ImDrawVert
    flags* {.importc: "Flags".} : ImDrawListFlags
    data* {.importc: "_Data".} : ptr ImDrawListSharedData
    ownerName* {.importc: "_OwnerName".} : cstring
    vtxCurrentIdx* {.importc: "_VtxCurrentIdx".} : uint32
    vtxWritePtr* {.importc: "_VtxWritePtr".} : ptr ImDrawVert
    idxWritePtr* {.importc: "_IdxWritePtr".} : ptr ImDrawIdx
    clipRectStack* {.importc: "_ClipRectStack".} : ImVector_ImVec4
    textureIdStack* {.importc: "_TextureIdStack".} : ImVector_ImTextureID
    path* {.importc: "_Path".} : ImVector_ImVec2
    channelsCurrent* {.importc: "_ChannelsCurrent".} : int32
    channelsCount* {.importc: "_ChannelsCount".} : int32
    channels* {.importc: "_Channels".} : ImVector_ImDrawChannel
  ImDrawVert* {.importc: "ImDrawVert", header: "<cimgui.h>".} = object
    pos* {.importc: "pos".} : ImVec2
    uv* {.importc: "uv".} : ImVec2
    col* {.importc: "col".} : ImU32
  ImFont* {.importc: "ImFont", header: "<cimgui.h>".} = object
    fontSize* {.importc: "FontSize".} : float32
    scale* {.importc: "Scale".} : float32
    displayOffset* {.importc: "DisplayOffset".} : ImVec2
    glyphs* {.importc: "Glyphs".} : ImVector_ImFontGlyph
    indexAdvanceX* {.importc: "IndexAdvanceX".} : ImVector_float
    indexLookup* {.importc: "IndexLookup".} : ImVector_ImWchar
    fallbackGlyph* {.importc: "FallbackGlyph".} : ptr ImFontGlyph
    fallbackAdvanceX* {.importc: "FallbackAdvanceX".} : float32
    fallbackChar* {.importc: "FallbackChar".} : ImWchar
    configDataCount* {.importc: "ConfigDataCount".} : int16
    configData* {.importc: "ConfigData".} : ptr ImFontConfig
    containerAtlas* {.importc: "ContainerAtlas".} : ptr ImFontAtlas
    ascent* {.importc: "Ascent".} : float32
    descent* {.importc: "Descent".} : float32
    dirtyLookupTables* {.importc: "DirtyLookupTables".} : bool
    metricsTotalSurface* {.importc: "MetricsTotalSurface".} : int32
  ImFontAtlas* {.importc: "ImFontAtlas", header: "<cimgui.h>".} = object
    locked* {.importc: "Locked".} : bool
    flags* {.importc: "Flags".} : ImFontAtlasFlags
    texID* {.importc: "TexID".} : ImTextureID
    texDesiredWidth* {.importc: "TexDesiredWidth".} : int32
    texGlyphPadding* {.importc: "TexGlyphPadding".} : int32
    texPixelsAlpha8* {.importc: "TexPixelsAlpha8".} : cstring
    texPixelsRGBA32* {.importc: "TexPixelsRGBA32".} : ptr uint32
    texWidth* {.importc: "TexWidth".} : int32
    texHeight* {.importc: "TexHeight".} : int32
    texUvScale* {.importc: "TexUvScale".} : ImVec2
    texUvWhitePixel* {.importc: "TexUvWhitePixel".} : ImVec2
    fonts* {.importc: "Fonts".} : ImVector_ImFontPtr
    customRects* {.importc: "CustomRects".} : ImVector_CustomRect
    configData* {.importc: "ConfigData".} : ImVector_ImFontConfig
    customRectIds* {.importc: "CustomRectIds".} : array[1, int32]
  ImFontConfig* {.importc: "ImFontConfig", header: "<cimgui.h>".} = object
    fontData* {.importc: "FontData".} : pointer
    fontDataSize* {.importc: "FontDataSize".} : int32
    fontDataOwnedByAtlas* {.importc: "FontDataOwnedByAtlas".} : bool
    fontNo* {.importc: "FontNo".} : int32
    sizePixels* {.importc: "SizePixels".} : float32
    oversampleH* {.importc: "OversampleH".} : int32
    oversampleV* {.importc: "OversampleV".} : int32
    pixelSnapH* {.importc: "PixelSnapH".} : bool
    glyphExtraSpacing* {.importc: "GlyphExtraSpacing".} : ImVec2
    glyphOffset* {.importc: "GlyphOffset".} : ImVec2
    glyphRanges* {.importc: "GlyphRanges".} : ptr ImWchar
    glyphMinAdvanceX* {.importc: "GlyphMinAdvanceX".} : float32
    glyphMaxAdvanceX* {.importc: "GlyphMaxAdvanceX".} : float32
    mergeMode* {.importc: "MergeMode".} : bool
    rasterizerFlags* {.importc: "RasterizerFlags".} : uint32
    rasterizerMultiply* {.importc: "RasterizerMultiply".} : float32
    name* {.importc: "Name".} : array[40, char]
    dstFont* {.importc: "DstFont".} : ptr ImFont
  ImFontGlyph* {.importc: "ImFontGlyph", header: "<cimgui.h>".} = object
    codepoint* {.importc: "Codepoint".} : ImWchar
    advanceX* {.importc: "AdvanceX".} : float32
    x0* {.importc: "X0".} : float32
    y0* {.importc: "Y0".} : float32
    x1* {.importc: "X1".} : float32
    y1* {.importc: "Y1".} : float32
    u0* {.importc: "U0".} : float32
    v0* {.importc: "V0".} : float32
    u1* {.importc: "U1".} : float32
    v1* {.importc: "V1".} : float32
  ImFontGlyphRangesBuilder* {.importc: "ImFontGlyphRangesBuilder", header: "<cimgui.h>".} = object
    usedChars* {.importc: "UsedChars".} : ImVector_int
  ImGuiIO* {.importc: "ImGuiIO", header: "<cimgui.h>".} = object
    configFlags* {.importc: "ConfigFlags".} : ImGuiConfigFlags
    backendFlags* {.importc: "BackendFlags".} : ImGuiBackendFlags
    displaySize* {.importc: "DisplaySize".} : ImVec2
    deltaTime* {.importc: "DeltaTime".} : float32
    iniSavingRate* {.importc: "IniSavingRate".} : float32
    iniFilename* {.importc: "IniFilename".} : cstring
    logFilename* {.importc: "LogFilename".} : cstring
    mouseDoubleClickTime* {.importc: "MouseDoubleClickTime".} : float32
    mouseDoubleClickMaxDist* {.importc: "MouseDoubleClickMaxDist".} : float32
    mouseDragThreshold* {.importc: "MouseDragThreshold".} : float32
    keyMap* {.importc: "KeyMap".} : array[ImGuiKey_COUNT, int32]
    keyRepeatDelay* {.importc: "KeyRepeatDelay".} : float32
    keyRepeatRate* {.importc: "KeyRepeatRate".} : float32
    userData* {.importc: "UserData".} : pointer
    fonts* {.importc: "Fonts".} : ptr ImFontAtlas
    fontGlobalScale* {.importc: "FontGlobalScale".} : float32
    fontAllowUserScaling* {.importc: "FontAllowUserScaling".} : bool
    fontDefault* {.importc: "FontDefault".} : ptr ImFont
    displayFramebufferScale* {.importc: "DisplayFramebufferScale".} : ImVec2
    displayVisibleMin* {.importc: "DisplayVisibleMin".} : ImVec2
    displayVisibleMax* {.importc: "DisplayVisibleMax".} : ImVec2
    mouseDrawCursor* {.importc: "MouseDrawCursor".} : bool
    configMacOSXBehaviors* {.importc: "ConfigMacOSXBehaviors".} : bool
    configInputTextCursorBlink* {.importc: "ConfigInputTextCursorBlink".} : bool
    configWindowsResizeFromEdges* {.importc: "ConfigWindowsResizeFromEdges".} : bool
    configWindowsMoveFromTitleBarOnly* {.importc: "ConfigWindowsMoveFromTitleBarOnly".} : bool
    backendPlatformName* {.importc: "BackendPlatformName".} : cstring
    backendRendererName* {.importc: "BackendRendererName".} : cstring
    backendPlatformUserData* {.importc: "BackendPlatformUserData".} : pointer
    backendRendererUserData* {.importc: "BackendRendererUserData".} : pointer
    backendLanguageUserData* {.importc: "BackendLanguageUserData".} : pointer
    getClipboardTextFn* {.importc: "GetClipboardTextFn".} : proc(user_data: pointer): cstring {.cdecl.}
    setClipboardTextFn* {.importc: "SetClipboardTextFn".} : proc(user_data: pointer, text: cstring): void {.cdecl.}
    clipboardUserData* {.importc: "ClipboardUserData".} : pointer
    imeSetInputScreenPosFn* {.importc: "ImeSetInputScreenPosFn".} : proc(x: int32, y: int32): void {.cdecl.}
    imeWindowHandle* {.importc: "ImeWindowHandle".} : pointer
    renderDrawListsFnUnused* {.importc: "RenderDrawListsFnUnused".} : pointer
    mousePos* {.importc: "MousePos".} : ImVec2
    mouseDown* {.importc: "MouseDown".} : array[5, bool]
    mouseWheel* {.importc: "MouseWheel".} : float32
    mouseWheelH* {.importc: "MouseWheelH".} : float32
    keyCtrl* {.importc: "KeyCtrl".} : bool
    keyShift* {.importc: "KeyShift".} : bool
    keyAlt* {.importc: "KeyAlt".} : bool
    keySuper* {.importc: "KeySuper".} : bool
    keysDown* {.importc: "KeysDown".} : array[512, bool]
    navInputs* {.importc: "NavInputs".} : array[ImGuiNavInput_COUNT, float32]
    wantCaptureMouse* {.importc: "WantCaptureMouse".} : bool
    wantCaptureKeyboard* {.importc: "WantCaptureKeyboard".} : bool
    wantTextInput* {.importc: "WantTextInput".} : bool
    wantSetMousePos* {.importc: "WantSetMousePos".} : bool
    wantSaveIniSettings* {.importc: "WantSaveIniSettings".} : bool
    navActive* {.importc: "NavActive".} : bool
    navVisible* {.importc: "NavVisible".} : bool
    framerate* {.importc: "Framerate".} : float32
    metricsRenderVertices* {.importc: "MetricsRenderVertices".} : int32
    metricsRenderIndices* {.importc: "MetricsRenderIndices".} : int32
    metricsRenderWindows* {.importc: "MetricsRenderWindows".} : int32
    metricsActiveWindows* {.importc: "MetricsActiveWindows".} : int32
    metricsActiveAllocations* {.importc: "MetricsActiveAllocations".} : int32
    mouseDelta* {.importc: "MouseDelta".} : ImVec2
    mousePosPrev* {.importc: "MousePosPrev".} : ImVec2
    mouseClickedPos* {.importc: "MouseClickedPos".} : array[5, ImVec2]
    mouseClickedTime* {.importc: "MouseClickedTime".} : array[5, float64]
    mouseClicked* {.importc: "MouseClicked".} : array[5, bool]
    mouseDoubleClicked* {.importc: "MouseDoubleClicked".} : array[5, bool]
    mouseReleased* {.importc: "MouseReleased".} : array[5, bool]
    mouseDownOwned* {.importc: "MouseDownOwned".} : array[5, bool]
    mouseDownDuration* {.importc: "MouseDownDuration".} : array[5, float32]
    mouseDownDurationPrev* {.importc: "MouseDownDurationPrev".} : array[5, float32]
    mouseDragMaxDistanceAbs* {.importc: "MouseDragMaxDistanceAbs".} : array[5, ImVec2]
    mouseDragMaxDistanceSqr* {.importc: "MouseDragMaxDistanceSqr".} : array[5, float32]
    keysDownDuration* {.importc: "KeysDownDuration".} : array[512, float32]
    keysDownDurationPrev* {.importc: "KeysDownDurationPrev".} : array[512, float32]
    navInputsDownDuration* {.importc: "NavInputsDownDuration".} : array[ImGuiNavInput_COUNT, float32]
    navInputsDownDurationPrev* {.importc: "NavInputsDownDurationPrev".} : array[ImGuiNavInput_COUNT, float32]
    inputQueueCharacters* {.importc: "InputQueueCharacters".} : ImVector_ImWchar
  ImGuiInputTextCallbackData* {.importc: "ImGuiInputTextCallbackData", header: "<cimgui.h>".} = object
    eventFlag* {.importc: "EventFlag".} : ImGuiInputTextFlags
    flags* {.importc: "Flags".} : ImGuiInputTextFlags
    userData* {.importc: "UserData".} : pointer
    eventChar* {.importc: "EventChar".} : ImWchar
    eventKey* {.importc: "EventKey".} : ImGuiKey
    buf* {.importc: "Buf".} : cstring
    bufTextLen* {.importc: "BufTextLen".} : int32
    bufSize* {.importc: "BufSize".} : int32
    bufDirty* {.importc: "BufDirty".} : bool
    cursorPos* {.importc: "CursorPos".} : int32
    selectionStart* {.importc: "SelectionStart".} : int32
    selectionEnd* {.importc: "SelectionEnd".} : int32
  ImGuiListClipper* {.importc: "ImGuiListClipper", header: "<cimgui.h>".} = object
    startPosY* {.importc: "StartPosY".} : float32
    itemsHeight* {.importc: "ItemsHeight".} : float32
    itemsCount* {.importc: "ItemsCount".} : int32
    stepNo* {.importc: "StepNo".} : int32
    displayStart* {.importc: "DisplayStart".} : int32
    displayEnd* {.importc: "DisplayEnd".} : int32
  ImGuiOnceUponAFrame* {.importc: "ImGuiOnceUponAFrame", header: "<cimgui.h>".} = object
    refFrame* {.importc: "RefFrame".} : int32
  ImGuiPayload* {.importc: "ImGuiPayload", header: "<cimgui.h>".} = object
    data* {.importc: "Data".} : pointer
    dataSize* {.importc: "DataSize".} : int32
    sourceId* {.importc: "SourceId".} : ImGuiID
    sourceParentId* {.importc: "SourceParentId".} : ImGuiID
    dataFrameCount* {.importc: "DataFrameCount".} : int32
    dataType* {.importc: "DataType".} : array[32+1, char]
    preview* {.importc: "Preview".} : bool
    delivery* {.importc: "Delivery".} : bool
  ImGuiSizeCallbackData* {.importc: "ImGuiSizeCallbackData", header: "<cimgui.h>".} = object
    userData* {.importc: "UserData".} : pointer
    pos* {.importc: "Pos".} : ImVec2
    currentSize* {.importc: "CurrentSize".} : ImVec2
    desiredSize* {.importc: "DesiredSize".} : ImVec2
  ImGuiStorage* {.importc: "ImGuiStorage", header: "<cimgui.h>".} = object
    data* {.importc: "Data".} : ImVector_Pair
  ImGuiStyle* {.importc: "ImGuiStyle", header: "<cimgui.h>".} = object
    alpha* {.importc: "Alpha".} : float32
    windowPadding* {.importc: "WindowPadding".} : ImVec2
    windowRounding* {.importc: "WindowRounding".} : float32
    windowBorderSize* {.importc: "WindowBorderSize".} : float32
    windowMinSize* {.importc: "WindowMinSize".} : ImVec2
    windowTitleAlign* {.importc: "WindowTitleAlign".} : ImVec2
    childRounding* {.importc: "ChildRounding".} : float32
    childBorderSize* {.importc: "ChildBorderSize".} : float32
    popupRounding* {.importc: "PopupRounding".} : float32
    popupBorderSize* {.importc: "PopupBorderSize".} : float32
    framePadding* {.importc: "FramePadding".} : ImVec2
    frameRounding* {.importc: "FrameRounding".} : float32
    frameBorderSize* {.importc: "FrameBorderSize".} : float32
    itemSpacing* {.importc: "ItemSpacing".} : ImVec2
    itemInnerSpacing* {.importc: "ItemInnerSpacing".} : ImVec2
    touchExtraPadding* {.importc: "TouchExtraPadding".} : ImVec2
    indentSpacing* {.importc: "IndentSpacing".} : float32
    columnsMinSpacing* {.importc: "ColumnsMinSpacing".} : float32
    scrollbarSize* {.importc: "ScrollbarSize".} : float32
    scrollbarRounding* {.importc: "ScrollbarRounding".} : float32
    grabMinSize* {.importc: "GrabMinSize".} : float32
    grabRounding* {.importc: "GrabRounding".} : float32
    tabRounding* {.importc: "TabRounding".} : float32
    tabBorderSize* {.importc: "TabBorderSize".} : float32
    buttonTextAlign* {.importc: "ButtonTextAlign".} : ImVec2
    displayWindowPadding* {.importc: "DisplayWindowPadding".} : ImVec2
    displaySafeAreaPadding* {.importc: "DisplaySafeAreaPadding".} : ImVec2
    mouseCursorScale* {.importc: "MouseCursorScale".} : float32
    antiAliasedLines* {.importc: "AntiAliasedLines".} : bool
    antiAliasedFill* {.importc: "AntiAliasedFill".} : bool
    curveTessellationTol* {.importc: "CurveTessellationTol".} : float32
    colors* {.importc: "Colors".} : array[ImGuiCol_COUNT, ImVec4]
  ImGuiTextBuffer* {.importc: "ImGuiTextBuffer", header: "<cimgui.h>".} = object
    buf* {.importc: "Buf".} : ImVector_char
  ImGuiTextFilter* {.importc: "ImGuiTextFilter", header: "<cimgui.h>".} = object
    inputBuf* {.importc: "InputBuf".} : array[256, char]
    filters* {.importc: "Filters".} : ImVector_TextRange
    countGrep* {.importc: "CountGrep".} : int32
  ImVec2* {.importc: "ImVec2", header: "<cimgui.h>".} = object
    x* {.importc: "x".} : float32
    y* {.importc: "y".} : float32
  ImVec4* {.importc: "ImVec4", header: "<cimgui.h>".} = object
    x* {.importc: "x".} : float32
    y* {.importc: "y".} : float32
    z* {.importc: "z".} : float32
    w* {.importc: "w".} : float32
  TextRange* {.importc: "TextRange", header: "<cimgui.h>".} = object
    b* {.importc: "b".} : cstring
    e* {.importc: "e".} : cstring

proc customRect_CustomRect*(): void {.imgui_lib, importc: "CustomRect_CustomRect".}
proc customRect_IsPacked*(self: ptr CustomRect): bool {.imgui_lib, importc: "CustomRect_IsPacked".}
proc customRect_destroy*(self: ptr CustomRect): void {.imgui_lib, importc: "CustomRect_destroy".}
proc hSV*(self: ptr ImColor, h: float32, s: float32, v: float32, a: float32 = 1.0f): ImColor {.imgui_lib, importc: "ImColor_HSV".}
proc newImColor*(): void {.imgui_lib, importc: "ImColor_ImColor".}
proc setHSV*(self: ptr ImColor, h: float32, s: float32, v: float32, a: float32 = 1.0f): void {.imgui_lib, importc: "ImColor_SetHSV".}
proc destroy*(self: ptr ImColor): void {.imgui_lib, importc: "ImColor_destroy".}
proc newImDrawCmd*(): void {.imgui_lib, importc: "ImDrawCmd_ImDrawCmd".}
proc destroy*(self: ptr ImDrawCmd): void {.imgui_lib, importc: "ImDrawCmd_destroy".}
proc clear*(self: ptr ImDrawData): void {.imgui_lib, importc: "ImDrawData_Clear".}
proc deIndexAllBuffers*(self: ptr ImDrawData): void {.imgui_lib, importc: "ImDrawData_DeIndexAllBuffers".}
proc newImDrawData*(): void {.imgui_lib, importc: "ImDrawData_ImDrawData".}
proc scaleClipRects*(self: ptr ImDrawData, sc: ImVec2): void {.imgui_lib, importc: "ImDrawData_ScaleClipRects".}
proc destroy*(self: ptr ImDrawData): void {.imgui_lib, importc: "ImDrawData_destroy".}
proc addBezierCurve*(self: ptr ImDrawList, pos0: ImVec2, cp0: ImVec2, cp1: ImVec2, pos1: ImVec2, col: ImU32, thickness: float32, num_segments: int32 = 0): void {.imgui_lib, importc: "ImDrawList_AddBezierCurve".}
proc addCallback*(self: ptr ImDrawList, callback: ImDrawCallback, callback_data: pointer): void {.imgui_lib, importc: "ImDrawList_AddCallback".}
proc addCircle*(self: ptr ImDrawList, centre: ImVec2, radius: float32, col: ImU32, num_segments: int32 = 12, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_AddCircle".}
proc addCircleFilled*(self: ptr ImDrawList, centre: ImVec2, radius: float32, col: ImU32, num_segments: int32 = 12): void {.imgui_lib, importc: "ImDrawList_AddCircleFilled".}
proc addConvexPolyFilled*(self: ptr ImDrawList, points: ptr ImVec2, num_points: int32, col: ImU32): void {.imgui_lib, importc: "ImDrawList_AddConvexPolyFilled".}
proc addDrawCmd*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_AddDrawCmd".}
proc addImage*(self: ptr ImDrawList, user_texture_id: ImTextureID, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: ImU32 = 0xFFFFFFF): void {.imgui_lib, importc: "ImDrawList_AddImage".}
proc addImageQuad*(self: ptr ImDrawList, user_texture_id: ImTextureID, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, uv_a: ImVec2, uv_b: ImVec2, uv_c: ImVec2, uv_d: ImVec2, col: ImU32 = 0xFFFFFFF): void {.imgui_lib, importc: "ImDrawList_AddImageQuad".}
proc addImageRounded*(self: ptr ImDrawList, user_texture_id: ImTextureID, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: ImU32, rounding: float32, rounding_corners: int32 = ImDrawCornerFlags_All): void {.imgui_lib, importc: "ImDrawList_AddImageRounded".}
proc addLine*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, col: ImU32, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_AddLine".}
proc addPolyline*(self: ptr ImDrawList, points: ptr ImVec2, num_points: int32, col: ImU32, closed: bool, thickness: float32): void {.imgui_lib, importc: "ImDrawList_AddPolyline".}
proc addQuad*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, col: ImU32, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_AddQuad".}
proc addQuadFilled*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_AddQuadFilled".}
proc addRect*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, col: ImU32, rounding: float32 = 0.0f, rounding_corners_flags: int32 = ImDrawCornerFlags_All, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_AddRect".}
proc addRectFilled*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, col: ImU32, rounding: float32 = 0.0f, rounding_corners_flags: int32 = ImDrawCornerFlags_All): void {.imgui_lib, importc: "ImDrawList_AddRectFilled".}
proc addRectFilledMultiColor*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, col_upr_left: ImU32, col_upr_right: ImU32, col_bot_right: ImU32, col_bot_left: ImU32): void {.imgui_lib, importc: "ImDrawList_AddRectFilledMultiColor".}
proc addText*(self: ptr ImDrawList, pos: ImVec2, col: ImU32, text_begin: cstring, text_end: cstring): void {.imgui_lib, importc: "ImDrawList_AddText".}
proc addTriangle*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, col: ImU32, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_AddTriangle".}
proc addTriangleFilled*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_AddTriangleFilled".}
proc channelsMerge*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_ChannelsMerge".}
proc channelsSetCurrent*(self: ptr ImDrawList, channel_index: int32): void {.imgui_lib, importc: "ImDrawList_ChannelsSetCurrent".}
proc channelsSplit*(self: ptr ImDrawList, channels_count: int32): void {.imgui_lib, importc: "ImDrawList_ChannelsSplit".}
proc clear*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_Clear".}
proc clearFreeMemory*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_ClearFreeMemory".}
proc cloneOutput*(self: ptr ImDrawList): ptr ImDrawList {.imgui_lib, importc: "ImDrawList_CloneOutput".}
proc getClipRectMax*(self: ptr ImDrawList): ImVec2 {.imgui_lib, importc: "ImDrawList_GetClipRectMax".}
proc getClipRectMin*(self: ptr ImDrawList): ImVec2 {.imgui_lib, importc: "ImDrawList_GetClipRectMin".}
proc newImDrawList*(shared_data: ptr ImDrawListSharedData): void {.imgui_lib, importc: "ImDrawList_ImDrawList".}
proc pathArcTo*(self: ptr ImDrawList, centre: ImVec2, radius: float32, a_min: float32, a_max: float32, num_segments: int32 = 10): void {.imgui_lib, importc: "ImDrawList_PathArcTo".}
proc pathArcToFast*(self: ptr ImDrawList, centre: ImVec2, radius: float32, a_min_of_12: int32, a_max_of_12: int32): void {.imgui_lib, importc: "ImDrawList_PathArcToFast".}
proc pathBezierCurveTo*(self: ptr ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, num_segments: int32 = 0): void {.imgui_lib, importc: "ImDrawList_PathBezierCurveTo".}
proc pathClear*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_PathClear".}
proc pathFillConvex*(self: ptr ImDrawList, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PathFillConvex".}
proc pathLineTo*(self: ptr ImDrawList, pos: ImVec2): void {.imgui_lib, importc: "ImDrawList_PathLineTo".}
proc pathLineToMergeDuplicate*(self: ptr ImDrawList, pos: ImVec2): void {.imgui_lib, importc: "ImDrawList_PathLineToMergeDuplicate".}
proc pathRect*(self: ptr ImDrawList, rect_min: ImVec2, rect_max: ImVec2, rounding: float32 = 0.0f, rounding_corners_flags: int32 = ImDrawCornerFlags_All): void {.imgui_lib, importc: "ImDrawList_PathRect".}
proc pathStroke*(self: ptr ImDrawList, col: ImU32, closed: bool, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_PathStroke".}
proc popClipRect*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_PopClipRect".}
proc popTextureID*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_PopTextureID".}
proc primQuadUV*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, uv_a: ImVec2, uv_b: ImVec2, uv_c: ImVec2, uv_d: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PrimQuadUV".}
proc primRect*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PrimRect".}
proc primRectUV*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PrimRectUV".}
proc primReserve*(self: ptr ImDrawList, idx_count: int32, vtx_count: int32): void {.imgui_lib, importc: "ImDrawList_PrimReserve".}
proc primVtx*(self: ptr ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PrimVtx".}
proc primWriteIdx*(self: ptr ImDrawList, idx: ImDrawIdx): void {.imgui_lib, importc: "ImDrawList_PrimWriteIdx".}
proc primWriteVtx*(self: ptr ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PrimWriteVtx".}
proc pushClipRect*(self: ptr ImDrawList, clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: bool = false): void {.imgui_lib, importc: "ImDrawList_PushClipRect".}
proc pushClipRectFullScreen*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_PushClipRectFullScreen".}
proc pushTextureID*(self: ptr ImDrawList, texture_id: ImTextureID): void {.imgui_lib, importc: "ImDrawList_PushTextureID".}
proc updateClipRect*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_UpdateClipRect".}
proc updateTextureID*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_UpdateTextureID".}
proc destroy*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_destroy".}
proc addCustomRectFontGlyph*(self: ptr ImFontAtlas, font: ptr ImFont, id: ImWchar, width: int32, height: int32, advance_x: float32, offset: ImVec2): int32 {.imgui_lib, importc: "ImFontAtlas_AddCustomRectFontGlyph".}
proc addCustomRectRegular*(self: ptr ImFontAtlas, id: uint32, width: int32, height: int32): int32 {.imgui_lib, importc: "ImFontAtlas_AddCustomRectRegular".}
proc addFont*(self: ptr ImFontAtlas, font_cfg: ptr ImFontConfig): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFont".}
proc addFontDefault*(self: ptr ImFontAtlas, font_cfg: ptr ImFontConfig): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFontDefault".}
proc addFontFromFileTTF*(self: ptr ImFontAtlas, filename: cstring, size_pixels: float32, font_cfg: ptr ImFontConfig, glyph_ranges: ptr ImWchar): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFontFromFileTTF".}
proc addFontFromMemoryCompressedBase85TTF*(self: ptr ImFontAtlas, compressed_font_data_base85: cstring, size_pixels: float32, font_cfg: ptr ImFontConfig, glyph_ranges: ptr ImWchar): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF".}
proc addFontFromMemoryCompressedTTF*(self: ptr ImFontAtlas, compressed_font_data: pointer, compressed_font_size: int32, size_pixels: float32, font_cfg: ptr ImFontConfig, glyph_ranges: ptr ImWchar): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFontFromMemoryCompressedTTF".}
proc addFontFromMemoryTTF*(self: ptr ImFontAtlas, font_data: pointer, font_size: int32, size_pixels: float32, font_cfg: ptr ImFontConfig, glyph_ranges: ptr ImWchar): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFontFromMemoryTTF".}
proc build*(self: ptr ImFontAtlas): bool {.imgui_lib, importc: "ImFontAtlas_Build".}
proc calcCustomRectUV*(self: ptr ImFontAtlas, rect: ptr CustomRect, out_uv_min: ptr ImVec2, out_uv_max: ptr ImVec2): void {.imgui_lib, importc: "ImFontAtlas_CalcCustomRectUV".}
proc clear*(self: ptr ImFontAtlas): void {.imgui_lib, importc: "ImFontAtlas_Clear".}
proc clearFonts*(self: ptr ImFontAtlas): void {.imgui_lib, importc: "ImFontAtlas_ClearFonts".}
proc clearInputData*(self: ptr ImFontAtlas): void {.imgui_lib, importc: "ImFontAtlas_ClearInputData".}
proc clearTexData*(self: ptr ImFontAtlas): void {.imgui_lib, importc: "ImFontAtlas_ClearTexData".}
proc getCustomRectByIndex*(self: ptr ImFontAtlas, index: int32): ptr CustomRect {.imgui_lib, importc: "ImFontAtlas_GetCustomRectByIndex".}
proc getGlyphRangesChineseFull*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesChineseFull".}
proc getGlyphRangesChineseSimplifiedCommon*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon".}
proc getGlyphRangesCyrillic*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesCyrillic".}
proc getGlyphRangesDefault*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesDefault".}
proc getGlyphRangesJapanese*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesJapanese".}
proc getGlyphRangesKorean*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesKorean".}
proc getGlyphRangesThai*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesThai".}
proc getMouseCursorTexData*(self: ptr ImFontAtlas, cursor: ImGuiMouseCursor, out_offset: ptr ImVec2, out_size: ptr ImVec2, out_uv_border: ptr ImVec2, out_uv_fill: ptr ImVec2): bool {.imgui_lib, importc: "ImFontAtlas_GetMouseCursorTexData".}
proc getTexDataAsAlpha8*(self: ptr ImFontAtlas, out_pixels: ptr ptr char, out_width: ptr int32, out_height: ptr int32, out_bytes_per_pixel: ptr int32): void {.imgui_lib, importc: "ImFontAtlas_GetTexDataAsAlpha8".}
proc getTexDataAsRGBA32*(self: ptr ImFontAtlas, out_pixels: ptr ptr char, out_width: ptr int32, out_height: ptr int32, out_bytes_per_pixel: ptr int32): void {.imgui_lib, importc: "ImFontAtlas_GetTexDataAsRGBA32".}
proc newImFontAtlas*(): void {.imgui_lib, importc: "ImFontAtlas_ImFontAtlas".}
proc isBuilt*(self: ptr ImFontAtlas): bool {.imgui_lib, importc: "ImFontAtlas_IsBuilt".}
proc setTexID*(self: ptr ImFontAtlas, id: ImTextureID): void {.imgui_lib, importc: "ImFontAtlas_SetTexID".}
proc destroy*(self: ptr ImFontAtlas): void {.imgui_lib, importc: "ImFontAtlas_destroy".}
proc newImFontConfig*(): void {.imgui_lib, importc: "ImFontConfig_ImFontConfig".}
proc destroy*(self: ptr ImFontConfig): void {.imgui_lib, importc: "ImFontConfig_destroy".}
proc addChar*(self: ptr ImFontGlyphRangesBuilder, c: ImWchar): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_AddChar".}
proc addRanges*(self: ptr ImFontGlyphRangesBuilder, ranges: ptr ImWchar): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_AddRanges".}
proc addText*(self: ptr ImFontGlyphRangesBuilder, text: cstring, text_end: cstring): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_AddText".}
proc buildRanges*(self: ptr ImFontGlyphRangesBuilder, out_ranges: ptr ImVector_ImWchar): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_BuildRanges".}
proc getBit*(self: ptr ImFontGlyphRangesBuilder, n: int32): bool {.imgui_lib, importc: "ImFontGlyphRangesBuilder_GetBit".}
proc newImFontGlyphRangesBuilder*(): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder".}
proc setBit*(self: ptr ImFontGlyphRangesBuilder, n: int32): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_SetBit".}
proc destroy*(self: ptr ImFontGlyphRangesBuilder): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_destroy".}
proc addGlyph*(self: ptr ImFont, c: ImWchar, x0: float32, y0: float32, x1: float32, y1: float32, u0: float32, v0: float32, u1: float32, v1: float32, advance_x: float32): void {.imgui_lib, importc: "ImFont_AddGlyph".}
proc addRemapChar*(self: ptr ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool = true): void {.imgui_lib, importc: "ImFont_AddRemapChar".}
proc buildLookupTable*(self: ptr ImFont): void {.imgui_lib, importc: "ImFont_BuildLookupTable".}
proc calcTextSizeA*(self: ptr ImFont, size: float32, max_width: float32, wrap_width: float32, text_begin: cstring, text_end: cstring, remaining: ptr ptr char): ImVec2 {.imgui_lib, importc: "ImFont_CalcTextSizeA".}
proc calcWordWrapPositionA*(self: ptr ImFont, scale: float32, text: cstring, text_end: cstring, wrap_width: float32): cstring {.imgui_lib, importc: "ImFont_CalcWordWrapPositionA".}
proc clearOutputData*(self: ptr ImFont): void {.imgui_lib, importc: "ImFont_ClearOutputData".}
proc findGlyph*(self: ptr ImFont, c: ImWchar): ptr ImFontGlyph {.imgui_lib, importc: "ImFont_FindGlyph".}
proc findGlyphNoFallback*(self: ptr ImFont, c: ImWchar): ptr ImFontGlyph {.imgui_lib, importc: "ImFont_FindGlyphNoFallback".}
proc getCharAdvance*(self: ptr ImFont, c: ImWchar): float32 {.imgui_lib, importc: "ImFont_GetCharAdvance".}
proc getDebugName*(self: ptr ImFont): cstring {.imgui_lib, importc: "ImFont_GetDebugName".}
proc growIndex*(self: ptr ImFont, new_size: int32): void {.imgui_lib, importc: "ImFont_GrowIndex".}
proc newImFont*(): void {.imgui_lib, importc: "ImFont_ImFont".}
proc isLoaded*(self: ptr ImFont): bool {.imgui_lib, importc: "ImFont_IsLoaded".}
proc renderChar*(self: ptr ImFont, draw_list: ptr ImDrawList, size: float32, pos: ImVec2, col: ImU32, c: ImWchar): void {.imgui_lib, importc: "ImFont_RenderChar".}
proc renderText*(self: ptr ImFont, draw_list: ptr ImDrawList, size: float32, pos: ImVec2, col: ImU32, clip_rect: ImVec4, text_begin: cstring, text_end: cstring, wrap_width: float32 = 0.0f, cpu_fine_clip: bool = false): void {.imgui_lib, importc: "ImFont_RenderText".}
proc setFallbackChar*(self: ptr ImFont, c: ImWchar): void {.imgui_lib, importc: "ImFont_SetFallbackChar".}
proc destroy*(self: ptr ImFont): void {.imgui_lib, importc: "ImFont_destroy".}
proc addInputCharacter*(self: ptr ImGuiIO, c: ImWchar): void {.imgui_lib, importc: "ImGuiIO_AddInputCharacter".}
proc addInputCharactersUTF8*(self: ptr ImGuiIO, str: cstring): void {.imgui_lib, importc: "ImGuiIO_AddInputCharactersUTF8".}
proc clearInputCharacters*(self: ptr ImGuiIO): void {.imgui_lib, importc: "ImGuiIO_ClearInputCharacters".}
proc newImGuiIO*(): void {.imgui_lib, importc: "ImGuiIO_ImGuiIO".}
proc destroy*(self: ptr ImGuiIO): void {.imgui_lib, importc: "ImGuiIO_destroy".}
proc deleteChars*(self: ptr ImGuiInputTextCallbackData, pos: int32, bytes_count: int32): void {.imgui_lib, importc: "ImGuiInputTextCallbackData_DeleteChars".}
proc hasSelection*(self: ptr ImGuiInputTextCallbackData): bool {.imgui_lib, importc: "ImGuiInputTextCallbackData_HasSelection".}
proc newImGuiInputTextCallbackData*(): void {.imgui_lib, importc: "ImGuiInputTextCallbackData_ImGuiInputTextCallbackData".}
proc insertChars*(self: ptr ImGuiInputTextCallbackData, pos: int32, text: cstring, text_end: cstring): void {.imgui_lib, importc: "ImGuiInputTextCallbackData_InsertChars".}
proc destroy*(self: ptr ImGuiInputTextCallbackData): void {.imgui_lib, importc: "ImGuiInputTextCallbackData_destroy".}
proc begin*(self: ptr ImGuiListClipper, items_count: int32, items_height: float32 = -1.0f): void {.imgui_lib, importc: "ImGuiListClipper_Begin".}
proc igEnd*(self: ptr ImGuiListClipper): void {.imgui_lib, importc: "ImGuiListClipper_End".}
proc newImGuiListClipper*(items_count: int32 = -1, items_height: float32 = -1.0f): void {.imgui_lib, importc: "ImGuiListClipper_ImGuiListClipper".}
proc step*(self: ptr ImGuiListClipper): bool {.imgui_lib, importc: "ImGuiListClipper_Step".}
proc destroy*(self: ptr ImGuiListClipper): void {.imgui_lib, importc: "ImGuiListClipper_destroy".}
proc newImGuiOnceUponAFrame*(): void {.imgui_lib, importc: "ImGuiOnceUponAFrame_ImGuiOnceUponAFrame".}
proc destroy*(self: ptr ImGuiOnceUponAFrame): void {.imgui_lib, importc: "ImGuiOnceUponAFrame_destroy".}
proc clear*(self: ptr ImGuiPayload): void {.imgui_lib, importc: "ImGuiPayload_Clear".}
proc newImGuiPayload*(): void {.imgui_lib, importc: "ImGuiPayload_ImGuiPayload".}
proc isDataType*(self: ptr ImGuiPayload, `type`: cstring): bool {.imgui_lib, importc: "ImGuiPayload_IsDataType".}
proc isDelivery*(self: ptr ImGuiPayload): bool {.imgui_lib, importc: "ImGuiPayload_IsDelivery".}
proc isPreview*(self: ptr ImGuiPayload): bool {.imgui_lib, importc: "ImGuiPayload_IsPreview".}
proc destroy*(self: ptr ImGuiPayload): void {.imgui_lib, importc: "ImGuiPayload_destroy".}
proc buildSortByKey*(self: ptr ImGuiStorage): void {.imgui_lib, importc: "ImGuiStorage_BuildSortByKey".}
proc clear*(self: ptr ImGuiStorage): void {.imgui_lib, importc: "ImGuiStorage_Clear".}
proc getBool*(self: ptr ImGuiStorage, key: ImGuiID, default_val: bool = false): bool {.imgui_lib, importc: "ImGuiStorage_GetBool".}
proc getBoolRef*(self: ptr ImGuiStorage, key: ImGuiID, default_val: bool = false): ptr bool {.imgui_lib, importc: "ImGuiStorage_GetBoolRef".}
proc getFloat*(self: ptr ImGuiStorage, key: ImGuiID, default_val: float32 = 0.0f): float32 {.imgui_lib, importc: "ImGuiStorage_GetFloat".}
proc getFloatRef*(self: ptr ImGuiStorage, key: ImGuiID, default_val: float32 = 0.0f): ptr float32 {.imgui_lib, importc: "ImGuiStorage_GetFloatRef".}
proc getInt*(self: ptr ImGuiStorage, key: ImGuiID, default_val: int32 = 0): int32 {.imgui_lib, importc: "ImGuiStorage_GetInt".}
proc getIntRef*(self: ptr ImGuiStorage, key: ImGuiID, default_val: int32 = 0): ptr int32 {.imgui_lib, importc: "ImGuiStorage_GetIntRef".}
proc getVoidPtr*(self: ptr ImGuiStorage, key: ImGuiID): pointer {.imgui_lib, importc: "ImGuiStorage_GetVoidPtr".}
proc getVoidPtrRef*(self: ptr ImGuiStorage, key: ImGuiID, default_val: pointer): ptr pointer {.imgui_lib, importc: "ImGuiStorage_GetVoidPtrRef".}
proc setAllInt*(self: ptr ImGuiStorage, val: int32): void {.imgui_lib, importc: "ImGuiStorage_SetAllInt".}
proc setBool*(self: ptr ImGuiStorage, key: ImGuiID, val: bool): void {.imgui_lib, importc: "ImGuiStorage_SetBool".}
proc setFloat*(self: ptr ImGuiStorage, key: ImGuiID, val: float32): void {.imgui_lib, importc: "ImGuiStorage_SetFloat".}
proc setInt*(self: ptr ImGuiStorage, key: ImGuiID, val: int32): void {.imgui_lib, importc: "ImGuiStorage_SetInt".}
proc setVoidPtr*(self: ptr ImGuiStorage, key: ImGuiID, val: pointer): void {.imgui_lib, importc: "ImGuiStorage_SetVoidPtr".}
proc newImGuiStyle*(): void {.imgui_lib, importc: "ImGuiStyle_ImGuiStyle".}
proc scaleAllSizes*(self: ptr ImGuiStyle, scale_factor: float32): void {.imgui_lib, importc: "ImGuiStyle_ScaleAllSizes".}
proc destroy*(self: ptr ImGuiStyle): void {.imgui_lib, importc: "ImGuiStyle_destroy".}
proc newImGuiTextBuffer*(): void {.imgui_lib, importc: "ImGuiTextBuffer_ImGuiTextBuffer".}
proc appendf*(self: ptr ImGuiTextBuffer, fmt: cstring): void {.imgui_lib, importc: "ImGuiTextBuffer_appendf", varargs.}
proc appendfv*(self: ptr ImGuiTextBuffer, fmt: cstring): void {.imgui_lib, importc: "ImGuiTextBuffer_appendfv", varargs.}
proc begin*(self: ptr ImGuiTextBuffer): cstring {.imgui_lib, importc: "ImGuiTextBuffer_begin", varargs.}
proc c_str*(self: ptr ImGuiTextBuffer): cstring {.imgui_lib, importc: "ImGuiTextBuffer_c_str", varargs.}
proc clear*(self: ptr ImGuiTextBuffer): void {.imgui_lib, importc: "ImGuiTextBuffer_clear", varargs.}
proc destroy*(self: ptr ImGuiTextBuffer): void {.imgui_lib, importc: "ImGuiTextBuffer_destroy", varargs.}
proc empty*(self: ptr ImGuiTextBuffer): bool {.imgui_lib, importc: "ImGuiTextBuffer_empty", varargs.}
proc igEnd*(self: ptr ImGuiTextBuffer): cstring {.imgui_lib, importc: "ImGuiTextBuffer_end", varargs.}
proc reserve*(self: ptr ImGuiTextBuffer, capacity: int32): void {.imgui_lib, importc: "ImGuiTextBuffer_reserve", varargs.}
proc size*(self: ptr ImGuiTextBuffer): int32 {.imgui_lib, importc: "ImGuiTextBuffer_size", varargs.}
proc build*(self: ptr ImGuiTextFilter): void {.imgui_lib, importc: "ImGuiTextFilter_Build", varargs.}
proc clear*(self: ptr ImGuiTextFilter): void {.imgui_lib, importc: "ImGuiTextFilter_Clear", varargs.}
proc draw*(self: ptr ImGuiTextFilter, label: cstring, width: float32 = 0.0f): bool {.imgui_lib, importc: "ImGuiTextFilter_Draw", varargs.}
proc newImGuiTextFilter*(default_filter: cstring = ""): void {.imgui_lib, importc: "ImGuiTextFilter_ImGuiTextFilter", varargs.}
proc isActive*(self: ptr ImGuiTextFilter): bool {.imgui_lib, importc: "ImGuiTextFilter_IsActive", varargs.}
proc passFilter*(self: ptr ImGuiTextFilter, text: cstring, text_end: cstring): bool {.imgui_lib, importc: "ImGuiTextFilter_PassFilter", varargs.}
proc destroy*(self: ptr ImGuiTextFilter): void {.imgui_lib, importc: "ImGuiTextFilter_destroy", varargs.}
proc newImVec2*(): void {.imgui_lib, importc: "ImVec2_ImVec2".}
proc destroy*(self: ptr ImVec2): void {.imgui_lib, importc: "ImVec2_destroy", varargs.}
proc newImVec4*(): void {.imgui_lib, importc: "ImVec4_ImVec4".}
proc destroy*(self: ptr ImVec4): void {.imgui_lib, importc: "ImVec4_destroy", varargs.}
proc pair_Pair*(key: ImGuiID, val_i: int32): void {.imgui_lib, importc: "Pair_Pair", varargs.}
proc pair_destroy*(self: ptr Pair): void {.imgui_lib, importc: "Pair_destroy", varargs.}
proc textRange_TextRange*(): void {.imgui_lib, importc: "TextRange_TextRange".}
proc textRange_begin*(self: ptr TextRange): cstring {.imgui_lib, importc: "TextRange_begin", varargs.}
proc textRange_destroy*(self: ptr TextRange): void {.imgui_lib, importc: "TextRange_destroy", varargs.}
proc textRange_empty*(self: ptr TextRange): bool {.imgui_lib, importc: "TextRange_empty", varargs.}
proc textRange_end*(self: ptr TextRange): cstring {.imgui_lib, importc: "TextRange_end", varargs.}
proc textRange_split*(self: ptr TextRange, separator: char, `out`: ptr ImVector_TextRange): void {.imgui_lib, importc: "TextRange_split", varargs.}
proc igAcceptDragDropPayload*(`type`: cstring, flags: ImGuiDragDropFlags = 0): ptr ImGuiPayload {.imgui_lib, importc: "igAcceptDragDropPayload", varargs.}
proc igAlignTextToFramePadding*(): void {.imgui_lib, importc: "igAlignTextToFramePadding".}
proc igArrowButton*(str_id: cstring, dir: ImGuiDir): bool {.imgui_lib, importc: "igArrowButton", varargs.}
proc igBegin*(name: cstring, p_open: ptr bool, flags: ImGuiWindowFlags = 0): bool {.imgui_lib, importc: "igBegin", varargs.}
proc igBeginChild*(str_id: cstring, size: ImVec2, border: bool = false, flags: ImGuiWindowFlags = 0): bool {.imgui_lib, importc: "igBeginChild", varargs.}
proc igBeginChildFrame*(id: ImGuiID, size: ImVec2, flags: ImGuiWindowFlags = 0): bool {.imgui_lib, importc: "igBeginChildFrame", varargs.}
proc igBeginCombo*(label: cstring, preview_value: cstring, flags: ImGuiComboFlags = 0): bool {.imgui_lib, importc: "igBeginCombo", varargs.}
proc igBeginDragDropSource*(flags: ImGuiDragDropFlags = 0): bool {.imgui_lib, importc: "igBeginDragDropSource", varargs.}
proc igBeginDragDropTarget*(): bool {.imgui_lib, importc: "igBeginDragDropTarget".}
proc igBeginGroup*(): void {.imgui_lib, importc: "igBeginGroup".}
proc igBeginMainMenuBar*(): bool {.imgui_lib, importc: "igBeginMainMenuBar".}
proc igBeginMenu*(label: cstring, enabled: bool = true): bool {.imgui_lib, importc: "igBeginMenu", varargs.}
proc igBeginMenuBar*(): bool {.imgui_lib, importc: "igBeginMenuBar".}
proc igBeginPopup*(str_id: cstring, flags: ImGuiWindowFlags = 0): bool {.imgui_lib, importc: "igBeginPopup", varargs.}
proc igBeginPopupContextItem*(str_id: cstring, mouse_button: int32 = 1): bool {.imgui_lib, importc: "igBeginPopupContextItem", varargs.}
proc igBeginPopupContextVoid*(str_id: cstring, mouse_button: int32 = 1): bool {.imgui_lib, importc: "igBeginPopupContextVoid", varargs.}
proc igBeginPopupContextWindow*(str_id: cstring, mouse_button: int32 = 1, also_over_items: bool = true): bool {.imgui_lib, importc: "igBeginPopupContextWindow", varargs.}
proc igBeginPopupModal*(name: cstring, p_open: ptr bool, flags: ImGuiWindowFlags = 0): bool {.imgui_lib, importc: "igBeginPopupModal", varargs.}
proc igBeginTabBar*(str_id: cstring, flags: ImGuiTabBarFlags = 0): bool {.imgui_lib, importc: "igBeginTabBar", varargs.}
proc igBeginTabItem*(label: cstring, p_open: ptr bool, flags: ImGuiTabItemFlags = 0): bool {.imgui_lib, importc: "igBeginTabItem", varargs.}
proc igBeginTooltip*(): void {.imgui_lib, importc: "igBeginTooltip".}
proc igBullet*(): void {.imgui_lib, importc: "igBullet".}
proc igBulletText*(fmt: cstring): void {.imgui_lib, importc: "igBulletText", varargs.}
proc igBulletTextV*(fmt: cstring): void {.imgui_lib, importc: "igBulletTextV", varargs.}
proc igButton*(label: cstring, size: ImVec2): bool {.imgui_lib, importc: "igButton", varargs.}
proc igCalcItemWidth*(): float32 {.imgui_lib, importc: "igCalcItemWidth".}
proc igCalcListClipping*(items_count: int32, items_height: float32, out_items_display_start: ptr int32, out_items_display_end: ptr int32): void {.imgui_lib, importc: "igCalcListClipping", varargs.}
proc igCalcTextSize*(text: cstring, text_end: cstring, hide_text_after_double_hash: bool = false, wrap_width: float32 = -1.0f): ImVec2 {.imgui_lib, importc: "igCalcTextSize", varargs.}
proc igCaptureKeyboardFromApp*(want_capture_keyboard_value: bool = true): void {.imgui_lib, importc: "igCaptureKeyboardFromApp", varargs.}
proc igCaptureMouseFromApp*(want_capture_mouse_value: bool = true): void {.imgui_lib, importc: "igCaptureMouseFromApp", varargs.}
proc igCheckbox*(label: cstring, v: ptr bool): bool {.imgui_lib, importc: "igCheckbox", varargs.}
proc igCheckboxFlags*(label: cstring, flags: ptr uint32, flags_value: uint32): bool {.imgui_lib, importc: "igCheckboxFlags", varargs.}
proc igCloseCurrentPopup*(): void {.imgui_lib, importc: "igCloseCurrentPopup".}
proc igCollapsingHeader*(label: cstring, flags: ImGuiTreeNodeFlags = 0): bool {.imgui_lib, importc: "igCollapsingHeader", varargs.}
proc igColorButton*(desc_id: cstring, col: ImVec4, flags: ImGuiColorEditFlags = 0, size: ImVec2): bool {.imgui_lib, importc: "igColorButton", varargs.}
proc igColorConvertFloat4ToU32*(`in`: ImVec4): ImU32 {.imgui_lib, importc: "igColorConvertFloat4ToU32", varargs.}
proc igColorConvertHSVtoRGB*(h: float32, s: float32, v: float32, out_r: float32, out_g: float32, out_b: float32): void {.imgui_lib, importc: "igColorConvertHSVtoRGB", varargs.}
proc igColorConvertRGBtoHSV*(r: float32, g: float32, b: float32, out_h: float32, out_s: float32, out_v: float32): void {.imgui_lib, importc: "igColorConvertRGBtoHSV", varargs.}
proc igColorConvertU32ToFloat4*(`in`: ImU32): ImVec4 {.imgui_lib, importc: "igColorConvertU32ToFloat4", varargs.}
proc igColorEdit3*(label: cstring, col: ptr float, flags: ImGuiColorEditFlags = 0): bool {.imgui_lib, importc: "igColorEdit3", varargs.}
proc igColorEdit4*(label: cstring, col: ptr float, flags: ImGuiColorEditFlags = 0): bool {.imgui_lib, importc: "igColorEdit4", varargs.}
proc igColorPicker3*(label: cstring, col: ptr float, flags: ImGuiColorEditFlags = 0): bool {.imgui_lib, importc: "igColorPicker3", varargs.}
proc igColorPicker4*(label: cstring, col: ptr float, flags: ImGuiColorEditFlags = 0, ref_col: ptr float32): bool {.imgui_lib, importc: "igColorPicker4", varargs.}
proc igColumns*(count: int32 = 1, id: cstring, border: bool = true): void {.imgui_lib, importc: "igColumns", varargs.}
proc igCombo*(label: cstring, current_item: ptr int32, items: ptr ptr char, items_count: int32, popup_max_height_in_items: int32 = -1): bool {.imgui_lib, importc: "igCombo", varargs.}
proc igCreateContext*(shared_font_atlas: ptr ImFontAtlas): ptr ImGuiContext {.imgui_lib, importc: "igCreateContext", varargs.}
proc igDebugCheckVersionAndDataLayout*(version_str: cstring, sz_io: uint32, sz_style: uint32, sz_vec2: uint32, sz_vec4: uint32, sz_drawvert: uint32): bool {.imgui_lib, importc: "igDebugCheckVersionAndDataLayout", varargs.}
proc igDestroyContext*(ctx: ptr ImGuiContext): void {.imgui_lib, importc: "igDestroyContext", varargs.}
proc igDragFloat*(label: cstring, v: ptr float32, v_speed: float32 = 1.0f, v_min: float32 = 0.0f, v_max: float32 = 0.0f, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragFloat", varargs.}
proc igDragFloat2*(label: cstring, v: ptr float, v_speed: float32 = 1.0f, v_min: float32 = 0.0f, v_max: float32 = 0.0f, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragFloat2", varargs.}
proc igDragFloat3*(label: cstring, v: ptr float, v_speed: float32 = 1.0f, v_min: float32 = 0.0f, v_max: float32 = 0.0f, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragFloat3", varargs.}
proc igDragFloat4*(label: cstring, v: ptr float, v_speed: float32 = 1.0f, v_min: float32 = 0.0f, v_max: float32 = 0.0f, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragFloat4", varargs.}
proc igDragFloatRange2*(label: cstring, v_current_min: ptr float32, v_current_max: ptr float32, v_speed: float32 = 1.0f, v_min: float32 = 0.0f, v_max: float32 = 0.0f, format: cstring = "%.3f", format_max: cstring, power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragFloatRange2", varargs.}
proc igDragInt*(label: cstring, v: ptr int32, v_speed: float32 = 1.0f, v_min: int32 = 0, v_max: int32 = 0, format: cstring = "%d"): bool {.imgui_lib, importc: "igDragInt", varargs.}
proc igDragInt2*(label: cstring, v: ptr int, v_speed: float32 = 1.0f, v_min: int32 = 0, v_max: int32 = 0, format: cstring = "%d"): bool {.imgui_lib, importc: "igDragInt2", varargs.}
proc igDragInt3*(label: cstring, v: ptr int, v_speed: float32 = 1.0f, v_min: int32 = 0, v_max: int32 = 0, format: cstring = "%d"): bool {.imgui_lib, importc: "igDragInt3", varargs.}
proc igDragInt4*(label: cstring, v: ptr int, v_speed: float32 = 1.0f, v_min: int32 = 0, v_max: int32 = 0, format: cstring = "%d"): bool {.imgui_lib, importc: "igDragInt4", varargs.}
proc igDragIntRange2*(label: cstring, v_current_min: ptr int32, v_current_max: ptr int32, v_speed: float32 = 1.0f, v_min: int32 = 0, v_max: int32 = 0, format: cstring = "%d", format_max: cstring): bool {.imgui_lib, importc: "igDragIntRange2", varargs.}
proc igDragScalar*(label: cstring, data_type: ImGuiDataType, v: pointer, v_speed: float32, v_min: pointer, v_max: pointer, format: cstring, power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragScalar", varargs.}
proc igDragScalarN*(label: cstring, data_type: ImGuiDataType, v: pointer, components: int32, v_speed: float32, v_min: pointer, v_max: pointer, format: cstring, power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragScalarN", varargs.}
proc igDummy*(size: ImVec2): void {.imgui_lib, importc: "igDummy", varargs.}
proc igEnd*(): void {.imgui_lib, importc: "igEnd".}
proc igEndChild*(): void {.imgui_lib, importc: "igEndChild".}
proc igEndChildFrame*(): void {.imgui_lib, importc: "igEndChildFrame".}
proc igEndCombo*(): void {.imgui_lib, importc: "igEndCombo".}
proc igEndDragDropSource*(): void {.imgui_lib, importc: "igEndDragDropSource".}
proc igEndDragDropTarget*(): void {.imgui_lib, importc: "igEndDragDropTarget".}
proc igEndFrame*(): void {.imgui_lib, importc: "igEndFrame".}
proc igEndGroup*(): void {.imgui_lib, importc: "igEndGroup".}
proc igEndMainMenuBar*(): void {.imgui_lib, importc: "igEndMainMenuBar".}
proc igEndMenu*(): void {.imgui_lib, importc: "igEndMenu".}
proc igEndMenuBar*(): void {.imgui_lib, importc: "igEndMenuBar".}
proc igEndPopup*(): void {.imgui_lib, importc: "igEndPopup".}
proc igEndTabBar*(): void {.imgui_lib, importc: "igEndTabBar".}
proc igEndTabItem*(): void {.imgui_lib, importc: "igEndTabItem".}
proc igEndTooltip*(): void {.imgui_lib, importc: "igEndTooltip".}
proc igGetClipboardText*(): cstring {.imgui_lib, importc: "igGetClipboardText".}
proc igGetColorU32*(idx: ImGuiCol, alpha_mul: float32 = 1.0f): ImU32 {.imgui_lib, importc: "igGetColorU32", varargs.}
proc igGetColumnIndex*(): int32 {.imgui_lib, importc: "igGetColumnIndex".}
proc igGetColumnOffset*(column_index: int32 = -1): float32 {.imgui_lib, importc: "igGetColumnOffset", varargs.}
proc igGetColumnWidth*(column_index: int32 = -1): float32 {.imgui_lib, importc: "igGetColumnWidth", varargs.}
proc igGetColumnsCount*(): int32 {.imgui_lib, importc: "igGetColumnsCount".}
proc igGetContentRegionAvail*(): ImVec2 {.imgui_lib, importc: "igGetContentRegionAvail".}
proc igGetContentRegionAvailWidth*(): float32 {.imgui_lib, importc: "igGetContentRegionAvailWidth".}
proc igGetContentRegionMax*(): ImVec2 {.imgui_lib, importc: "igGetContentRegionMax".}
proc igGetCurrentContext*(): ptr ImGuiContext {.imgui_lib, importc: "igGetCurrentContext".}
proc igGetCursorPos*(): ImVec2 {.imgui_lib, importc: "igGetCursorPos".}
proc igGetCursorPosX*(): float32 {.imgui_lib, importc: "igGetCursorPosX".}
proc igGetCursorPosY*(): float32 {.imgui_lib, importc: "igGetCursorPosY".}
proc igGetCursorScreenPos*(): ImVec2 {.imgui_lib, importc: "igGetCursorScreenPos".}
proc igGetCursorStartPos*(): ImVec2 {.imgui_lib, importc: "igGetCursorStartPos".}
proc igGetDragDropPayload*(): ptr ImGuiPayload {.imgui_lib, importc: "igGetDragDropPayload".}
proc igGetDrawData*(): ptr ImDrawData {.imgui_lib, importc: "igGetDrawData".}
proc igGetDrawListSharedData*(): ptr ImDrawListSharedData {.imgui_lib, importc: "igGetDrawListSharedData".}
proc igGetFont*(): ptr ImFont {.imgui_lib, importc: "igGetFont".}
proc igGetFontSize*(): float32 {.imgui_lib, importc: "igGetFontSize".}
proc igGetFontTexUvWhitePixel*(): ImVec2 {.imgui_lib, importc: "igGetFontTexUvWhitePixel".}
proc igGetFrameCount*(): int32 {.imgui_lib, importc: "igGetFrameCount".}
proc igGetFrameHeight*(): float32 {.imgui_lib, importc: "igGetFrameHeight".}
proc igGetFrameHeightWithSpacing*(): float32 {.imgui_lib, importc: "igGetFrameHeightWithSpacing".}
proc igGetID*(str_id: cstring): ImGuiID {.imgui_lib, importc: "igGetID", varargs.}
proc igGetIO*(): ptr ImGuiIO {.imgui_lib, importc: "igGetIO".}
proc igGetItemRectMax*(): ImVec2 {.imgui_lib, importc: "igGetItemRectMax".}
proc igGetItemRectMin*(): ImVec2 {.imgui_lib, importc: "igGetItemRectMin".}
proc igGetItemRectSize*(): ImVec2 {.imgui_lib, importc: "igGetItemRectSize".}
proc igGetKeyIndex*(imgui_key: ImGuiKey): int32 {.imgui_lib, importc: "igGetKeyIndex", varargs.}
proc igGetKeyPressedAmount*(key_index: int32, repeat_delay: float32, rate: float32): int32 {.imgui_lib, importc: "igGetKeyPressedAmount", varargs.}
proc igGetMouseCursor*(): ImGuiMouseCursor {.imgui_lib, importc: "igGetMouseCursor".}
proc igGetMouseDragDelta*(button: int32 = 0, lock_threshold: float32 = -1.0f): ImVec2 {.imgui_lib, importc: "igGetMouseDragDelta", varargs.}
proc igGetMousePos*(): ImVec2 {.imgui_lib, importc: "igGetMousePos".}
proc igGetMousePosOnOpeningCurrentPopup*(): ImVec2 {.imgui_lib, importc: "igGetMousePosOnOpeningCurrentPopup".}
proc igGetOverlayDrawList*(): ptr ImDrawList {.imgui_lib, importc: "igGetOverlayDrawList".}
proc igGetScrollMaxX*(): float32 {.imgui_lib, importc: "igGetScrollMaxX".}
proc igGetScrollMaxY*(): float32 {.imgui_lib, importc: "igGetScrollMaxY".}
proc igGetScrollX*(): float32 {.imgui_lib, importc: "igGetScrollX".}
proc igGetScrollY*(): float32 {.imgui_lib, importc: "igGetScrollY".}
proc igGetStateStorage*(): ptr ImGuiStorage {.imgui_lib, importc: "igGetStateStorage".}
proc igGetStyle*(): ptr ImGuiStyle {.imgui_lib, importc: "igGetStyle".}
proc igGetStyleColorName*(idx: ImGuiCol): cstring {.imgui_lib, importc: "igGetStyleColorName", varargs.}
proc igGetStyleColorVec4*(idx: ImGuiCol): ptr ImVec4 {.imgui_lib, importc: "igGetStyleColorVec4", varargs.}
proc igGetTextLineHeight*(): float32 {.imgui_lib, importc: "igGetTextLineHeight".}
proc igGetTextLineHeightWithSpacing*(): float32 {.imgui_lib, importc: "igGetTextLineHeightWithSpacing".}
proc igGetTime*(): float64 {.imgui_lib, importc: "igGetTime".}
proc igGetTreeNodeToLabelSpacing*(): float32 {.imgui_lib, importc: "igGetTreeNodeToLabelSpacing".}
proc igGetVersion*(): cstring {.imgui_lib, importc: "igGetVersion".}
proc igGetWindowContentRegionMax*(): ImVec2 {.imgui_lib, importc: "igGetWindowContentRegionMax".}
proc igGetWindowContentRegionMin*(): ImVec2 {.imgui_lib, importc: "igGetWindowContentRegionMin".}
proc igGetWindowContentRegionWidth*(): float32 {.imgui_lib, importc: "igGetWindowContentRegionWidth".}
proc igGetWindowDrawList*(): ptr ImDrawList {.imgui_lib, importc: "igGetWindowDrawList".}
proc igGetWindowHeight*(): float32 {.imgui_lib, importc: "igGetWindowHeight".}
proc igGetWindowPos*(): ImVec2 {.imgui_lib, importc: "igGetWindowPos".}
proc igGetWindowSize*(): ImVec2 {.imgui_lib, importc: "igGetWindowSize".}
proc igGetWindowWidth*(): float32 {.imgui_lib, importc: "igGetWindowWidth".}
proc igImage*(user_texture_id: ImTextureID, size: ImVec2, uv0: ImVec2, uv1: ImVec2, tint_col: ImVec4, border_col: ImVec4): void {.imgui_lib, importc: "igImage", varargs.}
proc igImageButton*(user_texture_id: ImTextureID, size: ImVec2, uv0: ImVec2, uv1: ImVec2, frame_padding: int32 = -1, bg_col: ImVec4, tint_col: ImVec4): bool {.imgui_lib, importc: "igImageButton", varargs.}
proc igIndent*(indent_w: float32 = 0.0f): void {.imgui_lib, importc: "igIndent", varargs.}
proc igInputDouble*(label: cstring, v: ptr float64, step: float64 = 0.0, step_fast: float64 = 0.0, format: cstring = "%.6f", flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputDouble", varargs.}
proc igInputFloat*(label: cstring, v: ptr float32, step: float32 = 0.0f, step_fast: float32 = 0.0f, format: cstring = "%.3f", flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputFloat", varargs.}
proc igInputFloat2*(label: cstring, v: ptr float, format: cstring = "%.3f", flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputFloat2", varargs.}
proc igInputFloat3*(label: cstring, v: ptr float, format: cstring = "%.3f", flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputFloat3", varargs.}
proc igInputFloat4*(label: cstring, v: ptr float, format: cstring = "%.3f", flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputFloat4", varargs.}
proc igInputInt*(label: cstring, v: ptr int32, step: int32 = 1, step_fast: int32 = 100, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputInt", varargs.}
proc igInputInt2*(label: cstring, v: ptr int, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputInt2", varargs.}
proc igInputInt3*(label: cstring, v: ptr int, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputInt3", varargs.}
proc igInputInt4*(label: cstring, v: ptr int, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputInt4", varargs.}
proc igInputScalar*(label: cstring, data_type: ImGuiDataType, v: pointer, step: pointer, step_fast: pointer, format: cstring, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputScalar", varargs.}
proc igInputScalarN*(label: cstring, data_type: ImGuiDataType, v: pointer, components: int32, step: pointer, step_fast: pointer, format: cstring, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputScalarN", varargs.}
proc igInputText*(label: cstring, buf: cstring, buf_size: uint32, flags: ImGuiInputTextFlags = 0, callback: ImGuiInputTextCallback, user_data: pointer): bool {.imgui_lib, importc: "igInputText", varargs.}
proc igInputTextMultiline*(label: cstring, buf: cstring, buf_size: uint32, size: ImVec2, flags: ImGuiInputTextFlags = 0, callback: ImGuiInputTextCallback, user_data: pointer): bool {.imgui_lib, importc: "igInputTextMultiline", varargs.}
proc igInvisibleButton*(str_id: cstring, size: ImVec2): bool {.imgui_lib, importc: "igInvisibleButton", varargs.}
proc igIsAnyItemActive*(): bool {.imgui_lib, importc: "igIsAnyItemActive".}
proc igIsAnyItemFocused*(): bool {.imgui_lib, importc: "igIsAnyItemFocused".}
proc igIsAnyItemHovered*(): bool {.imgui_lib, importc: "igIsAnyItemHovered".}
proc igIsAnyMouseDown*(): bool {.imgui_lib, importc: "igIsAnyMouseDown".}
proc igIsItemActive*(): bool {.imgui_lib, importc: "igIsItemActive".}
proc igIsItemClicked*(mouse_button: int32 = 0): bool {.imgui_lib, importc: "igIsItemClicked", varargs.}
proc igIsItemDeactivated*(): bool {.imgui_lib, importc: "igIsItemDeactivated".}
proc igIsItemDeactivatedAfterEdit*(): bool {.imgui_lib, importc: "igIsItemDeactivatedAfterEdit".}
proc igIsItemEdited*(): bool {.imgui_lib, importc: "igIsItemEdited".}
proc igIsItemFocused*(): bool {.imgui_lib, importc: "igIsItemFocused".}
proc igIsItemHovered*(flags: ImGuiHoveredFlags = 0): bool {.imgui_lib, importc: "igIsItemHovered", varargs.}
proc igIsItemVisible*(): bool {.imgui_lib, importc: "igIsItemVisible".}
proc igIsKeyDown*(user_key_index: int32): bool {.imgui_lib, importc: "igIsKeyDown", varargs.}
proc igIsKeyPressed*(user_key_index: int32, repeat: bool = true): bool {.imgui_lib, importc: "igIsKeyPressed", varargs.}
proc igIsKeyReleased*(user_key_index: int32): bool {.imgui_lib, importc: "igIsKeyReleased", varargs.}
proc igIsMouseClicked*(button: int32, repeat: bool = false): bool {.imgui_lib, importc: "igIsMouseClicked", varargs.}
proc igIsMouseDoubleClicked*(button: int32): bool {.imgui_lib, importc: "igIsMouseDoubleClicked", varargs.}
proc igIsMouseDown*(button: int32): bool {.imgui_lib, importc: "igIsMouseDown", varargs.}
proc igIsMouseDragging*(button: int32 = 0, lock_threshold: float32 = -1.0f): bool {.imgui_lib, importc: "igIsMouseDragging", varargs.}
proc igIsMouseHoveringRect*(r_min: ImVec2, r_max: ImVec2, clip: bool = true): bool {.imgui_lib, importc: "igIsMouseHoveringRect", varargs.}
proc igIsMousePosValid*(mouse_pos: ptr ImVec2): bool {.imgui_lib, importc: "igIsMousePosValid", varargs.}
proc igIsMouseReleased*(button: int32): bool {.imgui_lib, importc: "igIsMouseReleased", varargs.}
proc igIsPopupOpen*(str_id: cstring): bool {.imgui_lib, importc: "igIsPopupOpen", varargs.}
proc igIsRectVisible*(size: ImVec2): bool {.imgui_lib, importc: "igIsRectVisible", varargs.}
proc igIsWindowAppearing*(): bool {.imgui_lib, importc: "igIsWindowAppearing".}
proc igIsWindowCollapsed*(): bool {.imgui_lib, importc: "igIsWindowCollapsed".}
proc igIsWindowFocused*(flags: ImGuiFocusedFlags = 0): bool {.imgui_lib, importc: "igIsWindowFocused", varargs.}
proc igIsWindowHovered*(flags: ImGuiHoveredFlags = 0): bool {.imgui_lib, importc: "igIsWindowHovered", varargs.}
proc igLabelText*(label: cstring, fmt: cstring): void {.imgui_lib, importc: "igLabelText", varargs.}
proc igLabelTextV*(label: cstring, fmt: cstring): void {.imgui_lib, importc: "igLabelTextV", varargs.}
proc igListBox*(label: cstring, current_item: ptr int32, items: ptr ptr char, items_count: int32, height_in_items: int32 = -1): bool {.imgui_lib, importc: "igListBox", varargs.}
proc igListBoxFooter*(): void {.imgui_lib, importc: "igListBoxFooter".}
proc igListBoxHeader*(label: cstring, size: ImVec2): bool {.imgui_lib, importc: "igListBoxHeader", varargs.}
proc igLoadIniSettingsFromDisk*(ini_filename: cstring): void {.imgui_lib, importc: "igLoadIniSettingsFromDisk", varargs.}
proc igLoadIniSettingsFromMemory*(ini_data: cstring, ini_size: uint32 = 0): void {.imgui_lib, importc: "igLoadIniSettingsFromMemory", varargs.}
proc igLogButtons*(): void {.imgui_lib, importc: "igLogButtons".}
proc igLogFinish*(): void {.imgui_lib, importc: "igLogFinish".}
proc igLogText*(fmt: cstring): void {.imgui_lib, importc: "igLogText", varargs.}
proc igLogToClipboard*(max_depth: int32 = -1): void {.imgui_lib, importc: "igLogToClipboard", varargs.}
proc igLogToFile*(max_depth: int32 = -1, filename: cstring): void {.imgui_lib, importc: "igLogToFile", varargs.}
proc igLogToTTY*(max_depth: int32 = -1): void {.imgui_lib, importc: "igLogToTTY", varargs.}
proc igMemAlloc*(size: uint32): pointer {.imgui_lib, importc: "igMemAlloc", varargs.}
proc igMemFree*(`ptr`: pointer): void {.imgui_lib, importc: "igMemFree", varargs.}
proc igMenuItem*(label: cstring, shortcut: cstring, selected: bool = false, enabled: bool = true): bool {.imgui_lib, importc: "igMenuItem", varargs.}
proc igNewFrame*(): void {.imgui_lib, importc: "igNewFrame".}
proc igNewLine*(): void {.imgui_lib, importc: "igNewLine".}
proc igNextColumn*(): void {.imgui_lib, importc: "igNextColumn".}
proc igOpenPopup*(str_id: cstring): void {.imgui_lib, importc: "igOpenPopup", varargs.}
proc igOpenPopupOnItemClick*(str_id: cstring, mouse_button: int32 = 1): bool {.imgui_lib, importc: "igOpenPopupOnItemClick", varargs.}
proc igPlotHistogram*(label: cstring, values: ptr float32, values_count: int32, values_offset: int32 = 0, overlay_text: cstring, scale_min: float32, scale_max: float32, graph_size: ImVec2, stride: int32): void {.imgui_lib, importc: "igPlotHistogram", varargs.}
proc igPlotLines*(label: cstring, values: ptr float32, values_count: int32, values_offset: int32 = 0, overlay_text: cstring, scale_min: float32, scale_max: float32, graph_size: ImVec2, stride: int32): void {.imgui_lib, importc: "igPlotLines", varargs.}
proc igPopAllowKeyboardFocus*(): void {.imgui_lib, importc: "igPopAllowKeyboardFocus".}
proc igPopButtonRepeat*(): void {.imgui_lib, importc: "igPopButtonRepeat".}
proc igPopClipRect*(): void {.imgui_lib, importc: "igPopClipRect".}
proc igPopFont*(): void {.imgui_lib, importc: "igPopFont".}
proc igPopID*(): void {.imgui_lib, importc: "igPopID".}
proc igPopItemWidth*(): void {.imgui_lib, importc: "igPopItemWidth".}
proc igPopStyleColor*(count: int32 = 1): void {.imgui_lib, importc: "igPopStyleColor", varargs.}
proc igPopStyleVar*(count: int32 = 1): void {.imgui_lib, importc: "igPopStyleVar", varargs.}
proc igPopTextWrapPos*(): void {.imgui_lib, importc: "igPopTextWrapPos".}
proc igProgressBar*(fraction: float32, size_arg: ImVec2, overlay: cstring): void {.imgui_lib, importc: "igProgressBar", varargs.}
proc igPushAllowKeyboardFocus*(allow_keyboard_focus: bool): void {.imgui_lib, importc: "igPushAllowKeyboardFocus", varargs.}
proc igPushButtonRepeat*(repeat: bool): void {.imgui_lib, importc: "igPushButtonRepeat", varargs.}
proc igPushClipRect*(clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: bool): void {.imgui_lib, importc: "igPushClipRect", varargs.}
proc igPushFont*(font: ptr ImFont): void {.imgui_lib, importc: "igPushFont", varargs.}
proc igPushID*(str_id: cstring): void {.imgui_lib, importc: "igPushID", varargs.}
proc igPushItemWidth*(item_width: float32): void {.imgui_lib, importc: "igPushItemWidth", varargs.}
proc igPushStyleColor*(idx: ImGuiCol, col: ImU32): void {.imgui_lib, importc: "igPushStyleColor", varargs.}
proc igPushStyleVar*(idx: ImGuiStyleVar, val: float32): void {.imgui_lib, importc: "igPushStyleVar", varargs.}
proc igPushTextWrapPos*(wrap_local_pos_x: float32 = 0.0f): void {.imgui_lib, importc: "igPushTextWrapPos", varargs.}
proc igRadioButton*(label: cstring, active: bool): bool {.imgui_lib, importc: "igRadioButton", varargs.}
proc igRender*(): void {.imgui_lib, importc: "igRender".}
proc igResetMouseDragDelta*(button: int32 = 0): void {.imgui_lib, importc: "igResetMouseDragDelta", varargs.}
proc igSameLine*(local_pos_x: float32 = 0.0f, spacing_w: float32 = -1.0f): void {.imgui_lib, importc: "igSameLine", varargs.}
proc igSaveIniSettingsToDisk*(ini_filename: cstring): void {.imgui_lib, importc: "igSaveIniSettingsToDisk", varargs.}
proc igSaveIniSettingsToMemory*(out_ini_size: ptr uint32): cstring {.imgui_lib, importc: "igSaveIniSettingsToMemory", varargs.}
proc igSelectable*(label: cstring, selected: bool = false, flags: ImGuiSelectableFlags = 0, size: ImVec2): bool {.imgui_lib, importc: "igSelectable", varargs.}
proc igSeparator*(): void {.imgui_lib, importc: "igSeparator".}
proc igSetClipboardText*(text: cstring): void {.imgui_lib, importc: "igSetClipboardText", varargs.}
proc igSetColorEditOptions*(flags: ImGuiColorEditFlags): void {.imgui_lib, importc: "igSetColorEditOptions", varargs.}
proc igSetColumnOffset*(column_index: int32, offset_x: float32): void {.imgui_lib, importc: "igSetColumnOffset", varargs.}
proc igSetColumnWidth*(column_index: int32, width: float32): void {.imgui_lib, importc: "igSetColumnWidth", varargs.}
proc igSetCurrentContext*(ctx: ptr ImGuiContext): void {.imgui_lib, importc: "igSetCurrentContext", varargs.}
proc igSetCursorPos*(local_pos: ImVec2): void {.imgui_lib, importc: "igSetCursorPos", varargs.}
proc igSetCursorPosX*(local_x: float32): void {.imgui_lib, importc: "igSetCursorPosX", varargs.}
proc igSetCursorPosY*(local_y: float32): void {.imgui_lib, importc: "igSetCursorPosY", varargs.}
proc igSetCursorScreenPos*(pos: ImVec2): void {.imgui_lib, importc: "igSetCursorScreenPos", varargs.}
proc igSetDragDropPayload*(`type`: cstring, data: pointer, size: uint32, cond: ImGuiCond = 0): bool {.imgui_lib, importc: "igSetDragDropPayload", varargs.}
proc igSetItemAllowOverlap*(): void {.imgui_lib, importc: "igSetItemAllowOverlap".}
proc igSetItemDefaultFocus*(): void {.imgui_lib, importc: "igSetItemDefaultFocus".}
proc igSetKeyboardFocusHere*(offset: int32 = 0): void {.imgui_lib, importc: "igSetKeyboardFocusHere", varargs.}
proc igSetMouseCursor*(`type`: ImGuiMouseCursor): void {.imgui_lib, importc: "igSetMouseCursor", varargs.}
proc igSetNextTreeNodeOpen*(is_open: bool, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetNextTreeNodeOpen", varargs.}
proc igSetNextWindowBgAlpha*(alpha: float32): void {.imgui_lib, importc: "igSetNextWindowBgAlpha", varargs.}
proc igSetNextWindowCollapsed*(collapsed: bool, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetNextWindowCollapsed", varargs.}
proc igSetNextWindowContentSize*(size: ImVec2): void {.imgui_lib, importc: "igSetNextWindowContentSize", varargs.}
proc igSetNextWindowFocus*(): void {.imgui_lib, importc: "igSetNextWindowFocus".}
proc igSetNextWindowPos*(pos: ImVec2, cond: ImGuiCond = 0, pivot: ImVec2): void {.imgui_lib, importc: "igSetNextWindowPos", varargs.}
proc igSetNextWindowSize*(size: ImVec2, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetNextWindowSize", varargs.}
proc igSetNextWindowSizeConstraints*(size_min: ImVec2, size_max: ImVec2, custom_callback: ImGuiSizeCallback, custom_callback_data: pointer): void {.imgui_lib, importc: "igSetNextWindowSizeConstraints", varargs.}
proc igSetScrollFromPosY*(local_y: float32, center_y_ratio: float32 = 0.5f): void {.imgui_lib, importc: "igSetScrollFromPosY", varargs.}
proc igSetScrollHereY*(center_y_ratio: float32 = 0.5f): void {.imgui_lib, importc: "igSetScrollHereY", varargs.}
proc igSetScrollX*(scroll_x: float32): void {.imgui_lib, importc: "igSetScrollX", varargs.}
proc igSetScrollY*(scroll_y: float32): void {.imgui_lib, importc: "igSetScrollY", varargs.}
proc igSetStateStorage*(storage: ptr ImGuiStorage): void {.imgui_lib, importc: "igSetStateStorage", varargs.}
proc igSetTabItemClosed*(tab_or_docked_window_label: cstring): void {.imgui_lib, importc: "igSetTabItemClosed", varargs.}
proc igSetTooltip*(fmt: cstring): void {.imgui_lib, importc: "igSetTooltip", varargs.}
proc igSetTooltipV*(fmt: cstring): void {.imgui_lib, importc: "igSetTooltipV", varargs.}
proc igSetWindowCollapsed*(collapsed: bool, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetWindowCollapsed", varargs.}
proc igSetWindowFocus*(): void {.imgui_lib, importc: "igSetWindowFocus".}
proc igSetWindowFontScale*(scale: float32): void {.imgui_lib, importc: "igSetWindowFontScale", varargs.}
proc igSetWindowPos*(pos: ImVec2, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetWindowPos", varargs.}
proc igSetWindowSize*(size: ImVec2, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetWindowSize", varargs.}
proc igShowAboutWindow*(p_open: ptr bool): void {.imgui_lib, importc: "igShowAboutWindow", varargs.}
proc igShowDemoWindow*(p_open: ptr bool): void {.imgui_lib, importc: "igShowDemoWindow", varargs.}
proc igShowFontSelector*(label: cstring): void {.imgui_lib, importc: "igShowFontSelector", varargs.}
proc igShowMetricsWindow*(p_open: ptr bool): void {.imgui_lib, importc: "igShowMetricsWindow", varargs.}
proc igShowStyleEditor*(`ref`: ptr ImGuiStyle): void {.imgui_lib, importc: "igShowStyleEditor", varargs.}
proc igShowStyleSelector*(label: cstring): bool {.imgui_lib, importc: "igShowStyleSelector", varargs.}
proc igShowUserGuide*(): void {.imgui_lib, importc: "igShowUserGuide".}
proc igSliderAngle*(label: cstring, v_rad: ptr float32, v_degrees_min: float32 = -360.0f, v_degrees_max: float32 = +360.0f, format: cstring = "%.0f deg"): bool {.imgui_lib, importc: "igSliderAngle", varargs.}
proc igSliderFloat*(label: cstring, v: ptr float32, v_min: float32, v_max: float32, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderFloat", varargs.}
proc igSliderFloat2*(label: cstring, v: ptr float, v_min: float32, v_max: float32, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderFloat2", varargs.}
proc igSliderFloat3*(label: cstring, v: ptr float, v_min: float32, v_max: float32, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderFloat3", varargs.}
proc igSliderFloat4*(label: cstring, v: ptr float, v_min: float32, v_max: float32, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderFloat4", varargs.}
proc igSliderInt*(label: cstring, v: ptr int32, v_min: int32, v_max: int32, format: cstring = "%d"): bool {.imgui_lib, importc: "igSliderInt", varargs.}
proc igSliderInt2*(label: cstring, v: ptr int, v_min: int32, v_max: int32, format: cstring = "%d"): bool {.imgui_lib, importc: "igSliderInt2", varargs.}
proc igSliderInt3*(label: cstring, v: ptr int, v_min: int32, v_max: int32, format: cstring = "%d"): bool {.imgui_lib, importc: "igSliderInt3", varargs.}
proc igSliderInt4*(label: cstring, v: ptr int, v_min: int32, v_max: int32, format: cstring = "%d"): bool {.imgui_lib, importc: "igSliderInt4", varargs.}
proc igSliderScalar*(label: cstring, data_type: ImGuiDataType, v: pointer, v_min: pointer, v_max: pointer, format: cstring, power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderScalar", varargs.}
proc igSliderScalarN*(label: cstring, data_type: ImGuiDataType, v: pointer, components: int32, v_min: pointer, v_max: pointer, format: cstring, power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderScalarN", varargs.}
proc igSmallButton*(label: cstring): bool {.imgui_lib, importc: "igSmallButton", varargs.}
proc igSpacing*(): void {.imgui_lib, importc: "igSpacing".}
proc igStyleColorsClassic*(dst: ptr ImGuiStyle): void {.imgui_lib, importc: "igStyleColorsClassic", varargs.}
proc igStyleColorsDark*(dst: ptr ImGuiStyle): void {.imgui_lib, importc: "igStyleColorsDark", varargs.}
proc igStyleColorsLight*(dst: ptr ImGuiStyle): void {.imgui_lib, importc: "igStyleColorsLight", varargs.}
proc igText*(fmt: cstring): void {.imgui_lib, importc: "igText", varargs.}
proc igTextColored*(col: ImVec4, fmt: cstring): void {.imgui_lib, importc: "igTextColored", varargs.}
proc igTextColoredV*(col: ImVec4, fmt: cstring): void {.imgui_lib, importc: "igTextColoredV", varargs.}
proc igTextDisabled*(fmt: cstring): void {.imgui_lib, importc: "igTextDisabled", varargs.}
proc igTextDisabledV*(fmt: cstring): void {.imgui_lib, importc: "igTextDisabledV", varargs.}
proc igTextUnformatted*(text: cstring, text_end: cstring): void {.imgui_lib, importc: "igTextUnformatted", varargs.}
proc igTextV*(fmt: cstring): void {.imgui_lib, importc: "igTextV", varargs.}
proc igTextWrapped*(fmt: cstring): void {.imgui_lib, importc: "igTextWrapped", varargs.}
proc igTextWrappedV*(fmt: cstring): void {.imgui_lib, importc: "igTextWrappedV", varargs.}
proc igTreeAdvanceToLabelPos*(): void {.imgui_lib, importc: "igTreeAdvanceToLabelPos".}
proc igTreeNode*(label: cstring): bool {.imgui_lib, importc: "igTreeNode", varargs.}
proc igTreeNodeEx*(label: cstring, flags: ImGuiTreeNodeFlags = 0): bool {.imgui_lib, importc: "igTreeNodeEx", varargs.}
proc igTreeNodeExV*(str_id: cstring, flags: ImGuiTreeNodeFlags, fmt: cstring): bool {.imgui_lib, importc: "igTreeNodeExV", varargs.}
proc igTreeNodeV*(str_id: cstring, fmt: cstring): bool {.imgui_lib, importc: "igTreeNodeV", varargs.}
proc igTreePop*(): void {.imgui_lib, importc: "igTreePop".}
proc igTreePush*(str_id: cstring): void {.imgui_lib, importc: "igTreePush", varargs.}
proc igUnindent*(indent_w: float32 = 0.0f): void {.imgui_lib, importc: "igUnindent", varargs.}
proc igVSliderFloat*(label: cstring, size: ImVec2, v: ptr float32, v_min: float32, v_max: float32, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igVSliderFloat", varargs.}
proc igVSliderInt*(label: cstring, size: ImVec2, v: ptr int32, v_min: int32, v_max: int32, format: cstring = "%d"): bool {.imgui_lib, importc: "igVSliderInt", varargs.}
proc igVSliderScalar*(label: cstring, size: ImVec2, data_type: ImGuiDataType, v: pointer, v_min: pointer, v_max: pointer, format: cstring, power: float32 = 1.0f): bool {.imgui_lib, importc: "igVSliderScalar", varargs.}
proc igValue*(prefix: cstring, b: bool): void {.imgui_lib, importc: "igValue", varargs.}
